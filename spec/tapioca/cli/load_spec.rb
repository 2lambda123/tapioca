# typed: true
# frozen_string_literal: true

require "spec_helper"

module Tapioca
  class LoadSpec < SpecWithProject
    describe "cli::load" do
      # describe "generate gems" do
      #   describe "load rails app" do
      #   end

      #   describe "load non-rails app" do
      #     # case: rails app + gems
      #   end
      # end

      describe "generate dsl" do
        before(:all) do
          @project.require_real_gem("smart_properties", "1.15.0")
          @project.bundle_install

          @project.write("lib/post.rb", <<~RB)
            require "smart_properties"

            class Post
              include SmartProperties
              property :title, accepts: String
            end
          RB
        end

        after do
          @project.remove("sorbet/rbi/dsl")
        end

        # it "must do the correct load stuff with custom loader" do
        #   @project.write("sorbet/tapioca/load.rb", <<~RB)
        #     Tapioca.load(:dsl) do
        #       load_for_dsl
        #     end
        #   RB
        # end

        describe "load rails app" do
          before(:all) do
            @project.write("config/application.rb", <<~RB)
              module Rails
                class Application
                  attr_reader :config

                  def load_tasks; end
                end

                def self.application
                  Application.new
                end
              end

              lib_dir = File.expand_path("../lib/", __dir__)

              # Add lib directory to load path
              $LOAD_PATH << lib_dir

              # Require files from lib directory
              Dir.glob("**/*.rb", base: lib_dir).sort.each do |file|
                require(file)
              end
            RB

            @project.write("config/environment.rb", <<~RB)
              require_relative "application.rb"
            RB
          end

          it "must do the correct load stuff with a default rails app" do
            result = @project.tapioca("dsl Post")
            puts result
            assert_success_status(result)
            assert_project_file_exist("sorbet/rbi/dsl/post.rbi")
          end

          #   it "must do the correct load stuff with custom loader" do
          #     @project.write("sorbet/tapioca/load.rb", <<~RB)
          #       Tapioca.load(:dsl) do
          #         load_for_dsl
          #       end
          #     RB

          #     @project.write("lib/post.rb", <<~RB)
          #       require "smart_properties"

          #       class Post
          #         include SmartProperties
          #         property :title, accepts: String
          #       end
          #     RB

          #     result = @project.tapioca("dsl Post")

          #     assert_equal(<<~OUT, result.out)
          #       Loading Rails application... Done
          #       Loading DSL compiler classes... Done
          #       Compiling DSL RBI files...

          #             create  sorbet/rbi/dsl/post.rbi

          #       Done

          #       Typechecking RBI files...  Done
          #       No error found

          #       All operations performed in working directory.
          #       Please review changes and commit them.
          #     OUT

          #     assert_empty_stderr(result)

          #     assert_project_file_equal("sorbet/rbi/dsl/post.rbi", <<~RBI)
          #       # typed: true

          #       # DO NOT EDIT MANUALLY
          #       # This is an autogenerated file for dynamic methods in `Post`.
          #       # Please instead update this file by running `bin/tapioca dsl Post`.

          #       class Post
          #         include SmartPropertiesGeneratedMethods

          #         module SmartPropertiesGeneratedMethods
          #           sig { returns(T.nilable(::String)) }
          #           def title; end

          #           sig { params(title: T.nilable(::String)).returns(T.nilable(::String)) }
          #           def title=(title); end
          #         end
          #       end
          #     RBI

          #     assert_success_status(result)
          #   end
          #   # case: rails app + dsl
          #   # case: rails app + dsl + custom generator
          #   # case: rails app + dsl + custom ext
        end

        # describe "load non-rails app" do
        #   # case: non-rails app + dsl
        #   # case: non-rails app + dsl + custom generator
        #   # case: non-rails app + dsl + custom ext
        # end
      end
    end
  end
end
