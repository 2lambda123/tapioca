# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbs` gem.
# Please instead update this file by running `bin/tapioca gem rbs`.

module ::Bundler; end

class ::Bundler::LazySpecification
  sig { returns(::String) }
  def name; end

  sig { returns(::String) }
  def version; end
end

class ::Bundler::LockfileParser
  sig { params(_arg0: ::String).void }
  def initialize(_arg0); end

  sig { returns(::T::Array[::Bundler::LazySpecification]) }
  def specs; end
end

module ::Gem; end

class ::Gem::Specification
  sig { returns(::String) }
  def gem_dir; end

  sig { returns(::Gem::Version) }
  def version; end

  class << self
    sig { params(name: ::String, version: T.nilable(::String)).returns(T.attached_class) }
    def find_by_name(name, version = T.unsafe(nil)); end
  end
end

module ::Interfaces::Interface_Each
  sig { params(blk: T.proc.params(_arg0: A).void).void }
  def each(&blk); end

  A = type_member
end

module ::Interfaces::Interface_ToJson
  sig { params(state: ::JSON::State).returns(::String) }
  def to_json(state = T.unsafe(nil)); end
end

module ::Interfaces::RBS::AST::Declarations::Interface_WithMember
  sig { returns(::T::Array[T.untyped]) }
  def members; end
end

module ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_Annotated
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end
end

module ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_Commented
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end
end

module ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
  sig { params(_arg0: ::String).returns(T::Boolean) }
  def test_path(_arg0); end
end

module ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_WithRDocComment
  sig { returns(::RDoc::Markup::Document) }
  def comment; end
end

module ::Interfaces::RBS::CLI::Interface_IO
  sig { void }
  def flush; end

  sig { params(_arg0: T.untyped).void }
  def print(*_arg0); end

  sig { params(_arg0: T.untyped).void }
  def puts(*_arg0); end
end

module ::Interfaces::RBS::Collection::Sources::Interface_Source
  sig do
    params(
      _arg0: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry
    ).returns(::TypeAliases::TypeAlias_boolish)
  end
  def has?(_arg0); end

  sig do
    params(
      dest: ::Pathname,
      config_entry: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry,
      stdout: ::Interfaces::RBS::CLI::Interface_IO
    ).void
  end
  def install(dest:, config_entry:, stdout:); end

  sig do
    params(
      _arg0: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry
    ).returns(T.nilable(::TypeAliases::RBS::Collection::Sources::TypeAlias_manifest_entry))
  end
  def manifest_of(_arg0); end

  sig { returns(::TypeAliases::RBS::Collection::Sources::TypeAlias_source_entry) }
  def to_lockfile; end

  sig { params(_arg0: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry).returns(::T::Array[::String]) }
  def versions(_arg0); end
end

module ::Interfaces::RBS::Environment::Interface_ModuleOrClass
  sig { returns(::RBS::TypeName) }
  def name; end

  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end
end

module ::Interfaces::RBS::Environment::Interface_NamedDecl
  sig { returns(::RBS::TypeName) }
  def name; end
end

module ::Interfaces::RBS::Interface_HashEqual
  alias eql? ==

  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  sig { returns(::Integer) }
  def hash; end
end

module ::Interfaces::RBS::Interface_MethodName
  sig { returns(T.untyped) }
  def kind; end

  sig { returns(::Symbol) }
  def method_name; end

  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# _TypeBase interface represents the operations common to all of the types.
#
module ::Interfaces::RBS::Types::Interface_TypeBase
  include ::Interfaces::Interface_ToJson

  # Yields all direct sub types included in the type.
  # It doesn't yield the type itself.
  #
  #   parse("Hash[String, Array[Symbol]]").each_type do |ty|
  #     ...       # Yields String and Array[Symbol]
  #   end
  #
  sig { params(blk: T.proc.params(_arg0: ::TypeAliases::RBS::Types::TypeAlias_t).void).void }
  def each_type(&blk); end

  # Returns names of free variables of a type.
  # You can pass a Set instance to add the free variables to the set to avoid Set object allocation.
  #
  sig { params(_arg0: ::T::Set[::Symbol]).returns(::T::Set[::Symbol]) }
  def free_variables(_arg0 = T.unsafe(nil)); end

  # Maps type names included in the type and returns new instance of type.
  sig do
    params(
      blk: T.proc.params(_arg0: ::RBS::TypeName, _arg1: T.nilable(::RBS::Location[T.untyped, T.untyped]), _arg2: ::TypeAliases::RBS::Types::TypeAlias_t).returns(::RBS::TypeName)
    ).returns(::TypeAliases::RBS::Types::TypeAlias_t)
  end
  def map_type_name(&blk); end

  # Receives a substitution and returns a new type applied the substitution.
  #
  sig { params(_arg0: ::RBS::Substitution).returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def sub(_arg0); end

  # Returns a String representation.
  # `level` is used internally.
  #
  #   parse("String").to_s               # => "String"
  #   parse("String | Integer").to_s()   # => "String | Integer"
  #   parse("String | Integer").to_s(1)  # => "(String | Integer)"
  #
  sig { params(level: ::Integer).returns(::String) }
  def to_s(level = T.unsafe(nil)); end
end

module ::Interfaces::RBS::Writer::Interface_IO
  sig { void }
  def flush; end

  sig { params(_arg0: T.untyped).void }
  def puts(*_arg0); end
end

module ::Interfaces::RBS::Writer::Interface_Located
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end
end

class ::PP
  class << self
    sig { params(obj: T.untyped, out: ::IO, width: ::Integer).void }
    def pp(obj, out, width = T.unsafe(nil)); end
  end
end

module ::RBS::Annotate; end

class ::RBS::Annotate::Annotations
  sig { params(_arg0: ::T::Array[::TypeAliases::RBS::Annotate::Annotations::TypeAlias_t]).void }
  def initialize(_arg0); end

  sig { returns(T.nilable(::RBS::Annotate::Annotations::Copy)) }
  def copy_annotation; end

  sig { returns(::T::Array[::TypeAliases::RBS::Annotate::Annotations::TypeAlias_t]) }
  def items; end

  sig { returns(T::Boolean) }
  def skip?; end

  sig { returns(T::Boolean) }
  def skip_all?; end

  sig { params(path: ::String).returns(T::Boolean) }
  def test_path(path); end

  sig { params(pattern: ::String, path: ::String).returns(T::Boolean) }
  def test_path_string(pattern, path); end

  class << self
    sig do
      params(
        _arg0: ::RBS::AST::Annotation
      ).returns(T.nilable(::TypeAliases::RBS::Annotate::Annotations::TypeAlias_t))
    end
    def parse(_arg0); end
  end
end

# Copy annotation allows copying the doc from another subject.
# This helps working with incorrect RDoc annotations.
#
#     %a{annotate:rdoc:copy:Bar#baz}
#     %a{annotate:rdoc:copy:Bar.baz}
#     %a{annotate:rdoc:copy:Bar::Baz}
#
class ::RBS::Annotate::Annotations::Copy
  alias eql? ==

  sig { params(annotation: ::RBS::AST::Annotation, source: ::String).void }
  def initialize(annotation:, source:); end

  sig { params(_arg0: T.untyped).returns(T::Boolean) }
  def ==(_arg0); end

  sig { returns(::RBS::AST::Annotation) }
  def annotation; end

  sig { returns(::Integer) }
  def hash; end

  sig { returns(T.nilable(::Symbol)) }
  def method_name; end

  # Returns a tuple of:
  #
  # - Type name
  # - A pair of:
  #   - Boolean which holds if it is singleton
  #   - Name of method
  sig { returns([::RBS::TypeName, T.nilable([T::Boolean, ::Symbol])]) }
  def partition; end

  sig { returns(T::Boolean) }
  def singleton?; end

  sig { returns(::String) }
  def source; end

  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# Skip annotation allows skipping generating annotation of a subject.
#
#     %a{annotate:rdoc:skip}
#     %a{annotate:rdoc:skip:all}
#
class ::RBS::Annotate::Annotations::Skip
  alias eql? ==

  sig { params(annotation: ::RBS::AST::Annotation, skip_children: T::Boolean).void }
  def initialize(annotation:, skip_children:); end

  sig { params(_arg0: T.untyped).returns(T::Boolean) }
  def ==(_arg0); end

  sig { returns(::RBS::AST::Annotation) }
  def annotation; end

  sig { returns(::Integer) }
  def hash; end

  sig { returns(T::Boolean) }
  def skip_children; end
end

# Source annotation allows where the documents are copied from.
#
# It allows specifying two directions: the source to read from, and the source to skip.
#
#     %a{annotate:rdoc:source:from=ext/pathname}
#     %a{annotate:rdoc:source:skip=ext/pathname/doc}
#
# When you want to specify several paths, repeat writing the Source annotation.
#
class ::RBS::Annotate::Annotations::Source
  alias eql? ==

  sig { params(annotation: ::RBS::AST::Annotation, include: ::String).void }
  def initialize(annotation:, include:); end

  sig { params(_arg0: T.untyped).returns(T::Boolean) }
  def ==(_arg0); end

  sig { returns(::RBS::AST::Annotation) }
  def annotation; end

  sig { returns(::Integer) }
  def hash; end

  sig { returns(T.nilable(::String)) }
  def include_source; end

  sig { returns(T.nilable(::String)) }
  def skip_source; end
end

class ::RBS::Annotate::Formatter
  sig { void }
  def initialize; end

  sig { params(_arg0: T.nilable(T.any(::RDoc::Markup::Document, ::String))).returns(T.self_type) }
  def <<(_arg0); end

  sig { returns(::String) }
  def buffer; end

  sig { returns(T::Boolean) }
  def empty?; end

  sig { params(newline_at_end: T::Boolean).returns(::String) }
  def format(newline_at_end:); end

  sig { params(separator: ::String).returns(T.self_type) }
  def margin(separator: T.unsafe(nil)); end

  class << self
    sig { params(_arg0: ::RDoc::Markup::Document, blk: T.proc.params(_arg0: ::RDoc::Markup::Document).void).void }
    def each_part(_arg0, &blk); end

    sig { params(_arg0: ::RDoc::Markup::Document).returns(T.nilable(::String)) }
    def translate(_arg0); end
  end
end

class ::RBS::Annotate::RDocAnnotator
  sig { params(source: ::RBS::Annotate::RDocSource).void }
  def initialize(source:); end

  sig { params(_arg0: ::RBS::TypeName, _arg1: ::RBS::AST::Members::Alias).void }
  def annotate_alias(_arg0, _arg1); end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      _arg1: T.any(::RBS::AST::Members::AttrAccessor, ::RBS::AST::Members::AttrReader, ::RBS::AST::Members::AttrWriter)
    ).void
  end
  def annotate_attribute(_arg0, _arg1); end

  sig do
    params(
      _arg0: T.any(::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Module),
      outer: ::T::Array[::RBS::Namespace]
    ).void
  end
  def annotate_class(_arg0, outer:); end

  sig { params(_arg0: ::RBS::AST::Declarations::Constant, outer: ::T::Array[::RBS::Namespace]).void }
  def annotate_constant(_arg0, outer:); end

  sig do
    params(
      _arg0: ::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t],
      outer: ::T::Array[::RBS::Namespace]
    ).void
  end
  def annotate_decls(_arg0, outer: T.unsafe(nil)); end

  sig { params(_arg0: ::Pathname, preserve: T::Boolean).void }
  def annotate_file(_arg0, preserve:); end

  sig { params(_arg0: ::RBS::TypeName, _arg1: ::RBS::AST::Members::MethodDefinition).void }
  def annotate_method(_arg0, _arg1); end

  sig do
    params(
      _arg0: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_Annotated
    ).returns(::RBS::Annotate::Annotations)
  end
  def annotations(_arg0); end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      name: ::Symbol,
      singleton: T::Boolean,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
    ).returns(T.nilable(::String))
  end
  def doc_for_alias(_arg0, name:, singleton:, tester:); end

  # Having `require: nil` means any attribute is okay.
  # Having `require: "R"` means _read attr_ is required.
  # Having `require: "W"` means write attr_ is required.
  #
  sig do
    params(
      _arg0: ::RBS::TypeName,
      _arg1: ::Symbol,
      singleton: T::Boolean,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester,
      require: T.untyped
    ).returns(T.nilable(::String))
  end
  def doc_for_attribute(_arg0, _arg1, singleton:, tester:, require: T.unsafe(nil)); end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
    ).returns(T.nilable(::String))
  end
  def doc_for_class(_arg0, tester:); end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
    ).returns(T.nilable(::String))
  end
  def doc_for_constant(_arg0, tester:); end

  # Returns the formatted document of given method.
  #
  # Expands attribute documents, or alias documents if needed.
  #
  sig do
    params(
      _arg0: ::RBS::TypeName,
      instance_method: ::Symbol,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
    ).returns(T.nilable(::String))
  end
  def doc_for_method(_arg0, instance_method:, tester:); end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      instance_method: ::Symbol,
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester
    ).returns(T.nilable(::String))
  end
  def doc_for_method0(_arg0, instance_method:, tester:); end

  sig do
    params(
      _arg0: ::T::Array[T.all(::Interfaces::RBS::Annotate::RDocAnnotator::Interface_WithRDocComment, ::Object)],
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester,
      blk: T.proc.params(_arg0: [::RDoc::Markup::Document, T.all(::Interfaces::RBS::Annotate::RDocAnnotator::Interface_WithRDocComment, ::Object)]).void
    ).void
  end
  def each_part(_arg0, tester:, &blk); end

  sig { returns(T::Boolean) }
  def include_arg_lists; end

  sig { params(include_arg_lists: T::Boolean).void }
  def include_arg_lists(include_arg_lists); end

  sig { returns(T::Boolean) }
  def include_filename; end

  sig { params(include_filename: T::Boolean).void }
  def include_filename(include_filename); end

  sig { params(_arg0: ::T::Array[T.nilable(::String)], separator: ::String).returns(T.nilable(::String)) }
  def join_docs(_arg0, separator: T.unsafe(nil)); end

  # - If a string is given as `comment`, the content is attached to the object as a comment.
  # - If empty string is given as `comment`, it deletes the original comment.
  # - If `nil` is given as `comment`, it keeps the original comment.
  #
  sig do
    params(
      _arg0: T.all(::Interfaces::RBS::Annotate::RDocAnnotator::Interface_Commented, ::Object),
      comment: T.nilable(::String)
    ).void
  end
  def replace_comment(_arg0, comment); end

  sig do
    params(
      _arg0: T.nilable(::RBS::Annotate::Annotations::Copy),
      tester: ::Interfaces::RBS::Annotate::RDocAnnotator::Interface_PathTester,
      blk: T.proc.returns(T.nilable(::String))
    ).returns(T.nilable(::String))
  end
  def resolve_doc_source(_arg0, tester:, &blk); end

  sig { params(_arg0: ::RBS::TypeName, outer: ::T::Array[::RBS::Namespace]).returns(::RBS::TypeName) }
  def resolve_name(_arg0, outer:); end

  sig { returns(::RBS::Annotate::RDocSource) }
  def source; end
end

class ::RBS::Annotate::RDocSource
  sig { void }
  def initialize; end

  # Extract documents from `CodeObject`s
  sig do
    params(
      blk: T.proc.returns(T.nilable(::T::Array[::RDoc::CodeObject]))
    ).returns(T.nilable(::T::Array[::RDoc::Markup::Document]))
  end
  def docs(&blk); end

  sig { returns(::T::Array[::Pathname]) }
  def extra_dirs; end

  sig do
    params(
      _arg0: ::RBS::TypeName,
      _arg1: ::Symbol,
      singleton: T::Boolean
    ).returns(T.nilable(::T::Array[::RDoc::Attr]))
  end
  def find_attribute(_arg0, _arg1, singleton:); end

  sig { params(_arg0: ::RBS::TypeName).returns(T.nilable(::T::Array[::RDoc::ClassModule])) }
  def find_class(_arg0); end

  sig { params(_arg0: ::RBS::TypeName).returns(T.nilable(::T::Array[::RDoc::Constant])) }
  def find_const(_arg0); end

  sig { params(_arg0: ::RBS::TypeName, instance_method: ::Symbol).returns(T.nilable(::T::Array[::RDoc::AnyMethod])) }
  def find_method(_arg0, instance_method:); end

  sig { void }
  def load; end

  sig { returns(::T::Array[::RDoc::Store]) }
  def stores; end

  sig { returns(T::Boolean) }
  def with_gems_dir; end

  sig { params(with_gems_dir: T::Boolean).void }
  def with_gems_dir(with_gems_dir); end

  sig { returns(T::Boolean) }
  def with_home_dir; end

  sig { params(with_home_dir: T::Boolean).void }
  def with_home_dir(with_home_dir); end

  sig { returns(T::Boolean) }
  def with_site_dir; end

  sig { params(with_site_dir: T::Boolean).void }
  def with_site_dir(with_site_dir); end

  sig { returns(T::Boolean) }
  def with_system_dir; end

  sig { params(with_system_dir: T::Boolean).void }
  def with_system_dir(with_system_dir); end
end

class ::RBS::CLI
  sig { params(stdout: ::IO, stderr: ::IO).void }
  def initialize(stdout:, stderr:); end

  sig { params(_arg0: ::T::Array[::String]).returns(::OptionParser) }
  def collection_options(_arg0); end

  sig { returns(T::Boolean) }
  def has_parser?; end

  sig { params(_arg0: ::OptionParser, options: ::RBS::CLI::LibraryOptions).void }
  def library_parse(_arg0, options:); end

  sig { params(_arg0: ::OptionParser).void }
  def parse_logging_options(_arg0); end

  sig { params(args: ::T::Array[::String]).void }
  def run(args); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_ancestors(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::BasicObject).void }
  def run_annotate(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_ast(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_collection(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_constant(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_list(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_method(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_methods(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_parse(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_paths(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_prototype(_arg0, _arg1); end

  sig { params(format: ::String, _arg1: ::T::Array[::String]).void }
  def run_prototype_file(format, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_test(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_validate(_arg0, _arg1); end

  sig { params(_arg0: ::T::Array[::String], _arg1: ::RBS::CLI::LibraryOptions).void }
  def run_vendor(_arg0, _arg1); end

  sig { returns(::Interfaces::RBS::CLI::Interface_IO) }
  def stderr; end

  sig { returns(::Interfaces::RBS::CLI::Interface_IO) }
  def stdout; end

  sig { params(_arg0: ::RBS::CLI::LibraryOptions).returns(T.nilable(::String)) }
  def test_opt(_arg0); end
end

::RBS::CLI::COMMANDS = T.let(T.unsafe(nil), ::T::Array[::Symbol])

class ::RBS::CLI::LibraryOptions
  sig { void }
  def initialize; end

  sig { returns(T.nilable(::Pathname)) }
  def config_path; end

  sig { params(config_path: T.nilable(::Pathname)).void }
  def config_path(config_path); end

  sig { returns(T.nilable(::Pathname)) }
  def core_root; end

  sig { params(core_root: T.nilable(::Pathname)).void }
  def core_root(core_root); end

  sig { returns(::T::Array[::String]) }
  def dirs; end

  sig { returns(::T::Array[::String]) }
  def libs; end

  sig { returns(::RBS::EnvironmentLoader) }
  def loader; end

  sig { returns(::T::Array[::String]) }
  def repos; end

  sig { params(_arg0: ::OptionParser).returns(::OptionParser) }
  def setup_library_options(_arg0); end
end

module ::RDoc; end

class ::RDoc::AnyMethod < ::RDoc::MethodAttr
  sig { returns(T.nilable(::String)) }
  def arglists; end

  sig { returns(T.nilable(::String)) }
  def callseq; end
end

class ::RDoc::Attr < ::RDoc::MethodAttr
  sig { returns(T.untyped) }
  def rw; end

  sig { params(rw: T.untyped).void }
  def rw(rw); end
end

class ::RDoc::ClassModule < ::RDoc::Context
  sig { returns(::T::Array[::RDoc::Attr]) }
  def attributes; end

  sig { returns(::T::Array[::RDoc::Constant]) }
  def constants; end

  sig { returns(::T::Array[::RDoc::AnyMethod]) }
  def method_list; end
end

class ::RDoc::CodeObject
  sig { returns(::RDoc::Markup::Document) }
  def comment; end
end

class ::RDoc::Constant < ::RDoc::CodeObject
  sig { returns(::String) }
  def name; end
end

class ::RDoc::Context < ::RDoc::CodeObject; end
module ::RDoc::Markup; end

class ::RDoc::Markup::Document
  include ::Enumerable

  sig { params(_arg0: T.untyped).returns(::String) }
  def accept(_arg0); end

  sig { params(blk: T.proc.params(_arg0: ::RDoc::Markup::Document).void).void }
  def each(&blk); end

  sig { returns(T.nilable(::String)) }
  def file; end
end

class ::RDoc::Markup::ToMarkdown; end

class ::RDoc::MethodAttr < ::RDoc::CodeObject
  sig { returns(::String) }
  def arglists; end

  sig { returns(::String) }
  def call_seq; end

  sig { returns(T.nilable(::RDoc::MethodAttr)) }
  def is_alias_for; end

  sig { returns(::String) }
  def name; end

  sig { returns(T::Boolean) }
  def singleton; end
end

module ::RDoc::RI; end

module ::RDoc::RI::Paths
  class << self
    sig do
      params(
        system: T::Boolean,
        site: T::Boolean,
        home: T::Boolean,
        gems: T.any(::TypeAliases::RDoc::RI::Paths::TypeAlias_gem_filter, T.untyped),
        extra_dirs: ::String,
        blk: T.proc.params(_arg0: ::String, _arg1: ::TypeAliases::RDoc::RI::Paths::TypeAlias_path_type).void
      ).void
    end
    def each(system = T.unsafe(nil), site = T.unsafe(nil), home = T.unsafe(nil), gems = T.unsafe(nil), *extra_dirs, &blk); end
  end
end

class ::RDoc::Store
  sig { params(path: T.nilable(::String), type: T.nilable(::Symbol)).void }
  def initialize(path = T.unsafe(nil), type = T.unsafe(nil)); end

  sig { params(_arg0: ::String).returns(T.nilable(::RDoc::ClassModule)) }
  def find_class_or_module(_arg0); end

  sig { void }
  def load_all; end
end

class ::Ripper
  class << self
    sig do
      params(
        src: ::String,
        filename: ::String,
        lineno: ::Integer,
        raise_errors: T::Boolean
      ).returns(::T::Array[[[::Integer, ::Integer], ::Symbol, ::String, ::Ripper::Lexer::State]])
    end
    def lex(src, filename = T.unsafe(nil), lineno = T.unsafe(nil), raise_errors: T.unsafe(nil)); end
  end
end

class ::Ripper::Lexer; end
class ::Ripper::Lexer::State; end
module ::Ruby; end
::Ruby::Signature = T.let(T.unsafe(nil), T.untyped)
class ::RubyVM; end

module ::RubyVM::AbstractSyntaxTree
  class << self
    sig { params(proc: T.untyped).returns(::RubyVM::AbstractSyntaxTree::Node) }
    def of(proc); end

    sig { params(src: ::String).returns(::RubyVM::AbstractSyntaxTree::Node) }
    def parse(src); end

    sig { params(pathname: ::String).returns(::RubyVM::AbstractSyntaxTree::Node) }
    def parse_file(pathname); end
  end
end

class ::RubyVM::AbstractSyntaxTree::Node
  sig { returns(::T::Array[T.untyped]) }
  def children; end

  sig { returns(::Integer) }
  def first_column; end

  sig { returns(::Integer) }
  def first_lineno; end

  sig { returns(::String) }
  def inspect; end

  sig { returns(::Integer) }
  def last_column; end

  sig { returns(::Integer) }
  def last_lineno; end

  sig { returns(::Symbol) }
  def type; end
end

::TypeAliases::RBS::AST::Declarations::Alias::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Class::Super::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Class::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Class::TypeAlias_member = T.type_alias { T.any(::TypeAliases::RBS::AST::Declarations::TypeAlias_t, ::TypeAliases::RBS::AST::Members::TypeAlias_t) }
::TypeAliases::RBS::AST::Declarations::Constant::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Global::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_member = T.type_alias { ::TypeAliases::RBS::AST::Members::TypeAlias_t }
::TypeAliases::RBS::AST::Declarations::MixinHelper::TypeAlias_mixin_member = T.type_alias { T.any(::RBS::AST::Members::Extend, ::RBS::AST::Members::Include, ::RBS::AST::Members::Prepend) }
::TypeAliases::RBS::AST::Declarations::Module::Self::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Module::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Declarations::Module::TypeAlias_member = T.type_alias { T.any(::TypeAliases::RBS::AST::Declarations::TypeAlias_t, ::TypeAliases::RBS::AST::Members::TypeAlias_t) }
::TypeAliases::RBS::AST::Declarations::TypeAlias_t = T.type_alias { T.any(::RBS::AST::Declarations::Alias, ::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Constant, ::RBS::AST::Declarations::Global, ::RBS::AST::Declarations::Interface, ::RBS::AST::Declarations::Module) }
::TypeAliases::RBS::AST::Members::Alias::TypeAlias_kind = T.type_alias { T.untyped }
::TypeAliases::RBS::AST::Members::Alias::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_kind = T.type_alias { T.untyped }
::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_kind = T.type_alias { T.untyped }
::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Members::Mixin::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::Members::TypeAlias_t = T.type_alias { T.any(::RBS::AST::Members::Alias, ::RBS::AST::Members::AttrAccessor, ::RBS::AST::Members::AttrReader, ::RBS::AST::Members::AttrWriter, ::RBS::AST::Members::ClassInstanceVariable, ::RBS::AST::Members::ClassVariable, ::RBS::AST::Members::Extend, ::RBS::AST::Members::Include, ::RBS::AST::Members::InstanceVariable, ::RBS::AST::Members::MethodDefinition, ::RBS::AST::Members::Prepend, ::RBS::AST::Members::Private, ::RBS::AST::Members::Public) }
::TypeAliases::RBS::AST::Members::TypeAlias_visibility = T.type_alias { T.untyped }
::TypeAliases::RBS::AST::Members::Var::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::TypeParam::TypeAlias_bound = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::AST::TypeParam::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::AST::TypeParam::TypeAlias_variance = T.type_alias { T.untyped }
::TypeAliases::RBS::AncestorGraph::TypeAlias_node = T.type_alias { T.any(::RBS::AncestorGraph::InstanceNode, ::RBS::AncestorGraph::SingletonNode) }
::TypeAliases::RBS::Annotate::Annotations::TypeAlias_t = T.type_alias { T.any(::RBS::Annotate::Annotations::Copy, ::RBS::Annotate::Annotations::Skip, ::RBS::Annotate::Annotations::Source) }
::TypeAliases::RBS::Buffer::TypeAlias_loc = T.type_alias { [::Integer, ::Integer] }
::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry = T.type_alias { {"name" => ::String, "version" => T.nilable(::String), "ignore" => ::TypeAliases::TypeAlias_boolish, "source" => T.nilable(::TypeAliases::RBS::Collection::Sources::TypeAlias_source_entry)} }
::TypeAliases::RBS::Collection::Sources::Git::TypeAlias_source_entry = T.type_alias { {"type" => T.untyped, "name" => ::String, "remote" => ::String, "revision" => ::String, "repo_dir" => T.nilable(::String)} }
::TypeAliases::RBS::Collection::Sources::Rubygems::TypeAlias_source_entry = T.type_alias { {"type" => T.untyped} }
::TypeAliases::RBS::Collection::Sources::Stdlib::TypeAlias_source_entry = T.type_alias { {"type" => T.untyped} }
::TypeAliases::RBS::Collection::Sources::TypeAlias_manifest_entry = T.type_alias { {"dependencies" => T.nilable(::T::Array[{"name" => ::String}])} }
::TypeAliases::RBS::Collection::Sources::TypeAlias_source_entry = T.type_alias { T.any(::TypeAliases::RBS::Collection::Sources::Git::TypeAlias_source_entry, ::TypeAliases::RBS::Collection::Sources::Rubygems::TypeAlias_source_entry, ::TypeAliases::RBS::Collection::Sources::Stdlib::TypeAlias_source_entry) }
::TypeAliases::RBS::Constant::TypeAlias_constant_entry = T.type_alias { T.any(::RBS::Environment::ClassEntry, ::RBS::Environment::ModuleEntry, ::RBS::Environment::SingleEntry[::RBS::TypeName, ::RBS::AST::Declarations::Constant]) }
::TypeAliases::RBS::Definition::Ancestor::Instance::TypeAlias_source = T.type_alias { T.nilable(T.any(::RBS::AST::Declarations::Module::Self, ::RBS::AST::Members::Extend, ::RBS::AST::Members::Include, ::RBS::AST::Members::Prepend, T.untyped)) }
::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t = T.type_alias { T.any(::RBS::Definition::Ancestor::Instance, ::RBS::Definition::Ancestor::Singleton) }
::TypeAliases::RBS::Definition::Method::TypeAlias_method_member = T.type_alias { T.any(::RBS::AST::Members::AttrAccessor, ::RBS::AST::Members::AttrReader, ::RBS::AST::Members::AttrWriter, ::RBS::AST::Members::MethodDefinition) }
::TypeAliases::RBS::Definition::TypeAlias_accessibility = T.type_alias { T.untyped }
::TypeAliases::RBS::Definition::TypeAlias_definition_entry = T.type_alias { T.any(::RBS::Environment::ClassEntry, ::RBS::Environment::ModuleEntry, ::RBS::Environment::SingleEntry[::RBS::TypeName, ::RBS::AST::Declarations::Interface]) }
::TypeAliases::RBS::Definition::TypeAlias_self_type = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_accessibility = T.type_alias { ::TypeAliases::RBS::Definition::TypeAlias_accessibility }
::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_original = T.type_alias { T.any(::RBS::AST::Members::Alias, ::RBS::AST::Members::AttrAccessor, ::RBS::AST::Members::AttrReader, ::RBS::AST::Members::AttrWriter, ::RBS::AST::Members::MethodDefinition) }
::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_mixin_member = T.type_alias { T.any(::RBS::AST::Members::Extend, ::RBS::AST::Members::Include) }
::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_ty = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_original = T.type_alias { ::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_original }
::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_ty = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::Environment::TypeAlias_module_decl = T.type_alias { T.any(::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Module) }
::TypeAliases::RBS::EnvironmentLoader::TypeAlias_source = T.type_alias { T.any(::Pathname, ::RBS::EnvironmentLoader::Library, T.untyped) }
::TypeAliases::RBS::EnvironmentWalker::TypeAlias_node = T.type_alias { T.any(::RBS::EnvironmentWalker::InstanceNode, ::RBS::EnvironmentWalker::SingletonNode, ::RBS::EnvironmentWalker::TypeNameNode) }
::TypeAliases::RBS::Locator::TypeAlias_component = T.type_alias { T.any(::RBS::AST::Declarations::Class::Super, ::RBS::AST::Declarations::Module::Self, ::RBS::AST::TypeParam, ::RBS::MethodType, ::Symbol, ::TypeAliases::RBS::AST::Declarations::TypeAlias_t, ::TypeAliases::RBS::AST::Members::TypeAlias_t, ::TypeAliases::RBS::Types::TypeAlias_t) }
::TypeAliases::RBS::MethodType::TypeAlias_attr_loc = T.type_alias { ::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_loc }
::TypeAliases::RBS::MethodType::TypeAlias_def_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::MethodType::TypeAlias_loc = T.type_alias { T.any(::TypeAliases::RBS::MethodType::TypeAlias_attr_loc, ::TypeAliases::RBS::MethodType::TypeAlias_def_loc) }
::TypeAliases::RBS::MixinClassError::TypeAlias_member = T.type_alias { T.any(::RBS::AST::Members::Extend, ::RBS::AST::Members::Include, ::RBS::AST::Members::Prepend) }
::TypeAliases::RBS::Prototype::Helpers::TypeAlias_node = T.type_alias { ::RubyVM::AbstractSyntaxTree::Node }
::TypeAliases::RBS::Prototype::RB::Context::TypeAlias_method_kind = T.type_alias { T.untyped }
::TypeAliases::RBS::Prototype::RB::TypeAlias_decl = T.type_alias { T.any(::TypeAliases::RBS::AST::Declarations::TypeAlias_t, ::TypeAliases::RBS::AST::Members::TypeAlias_t) }
::TypeAliases::RBS::Prototype::RBI::TypeAlias_module_decl = T.type_alias { T.any(::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Module) }
::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_defn = T.type_alias { ::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition }
::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_ty = T.type_alias { T.any(::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface) }
::TypeAliases::RBS::Resolver::TypeAlias_context = T.type_alias { T.untyped }
::TypeAliases::RBS::Resolver::TypeNameResolver::TypeAlias_query = T.type_alias { [::RBS::TypeName, ::TypeAliases::RBS::Resolver::TypeAlias_context] }
::TypeAliases::RBS::TypeName::TypeAlias_kind = T.type_alias { T.untyped }
::TypeAliases::RBS::TypeNameResolver::TypeAlias_context = T.type_alias { ::T::Array[::RBS::Namespace] }
::TypeAliases::RBS::Types::Alias::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::ClassInstance::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::ClassSingleton::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Function::Param::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Interface::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Intersection::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Literal::TypeAlias_literal = T.type_alias { T.any(::FalseClass, ::Integer, ::String, ::Symbol, ::TrueClass) }
::TypeAliases::RBS::Types::Literal::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Optional::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Proc::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Record::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Tuple::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::TypeAlias_t = T.type_alias { T.any(::RBS::Types::Alias, ::RBS::Types::Bases::Any, ::RBS::Types::Bases::Bool, ::RBS::Types::Bases::Bottom, ::RBS::Types::Bases::Class, ::RBS::Types::Bases::Instance, ::RBS::Types::Bases::Nil, ::RBS::Types::Bases::Self, ::RBS::Types::Bases::Top, ::RBS::Types::Bases::Void, ::RBS::Types::ClassInstance, ::RBS::Types::ClassSingleton, ::RBS::Types::Interface, ::RBS::Types::Intersection, ::RBS::Types::Literal, ::RBS::Types::Optional, ::RBS::Types::Proc, ::RBS::Types::Record, ::RBS::Types::Tuple, ::RBS::Types::Union, ::RBS::Types::Variable) }
::TypeAliases::RBS::Types::Union::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::Types::Variable::TypeAlias_loc = T.type_alias { ::RBS::Location[T.untyped, T.untyped] }
::TypeAliases::RBS::VarianceCalculator::TypeAlias_variance = T.type_alias { T.untyped }
::TypeAliases::RDoc::RI::Paths::TypeAlias_gem_filter = T.type_alias { T.untyped }
::TypeAliases::RDoc::RI::Paths::TypeAlias_path_type = T.type_alias { T.untyped }
::TypeAliases::TypeAlias_boolish = T.type_alias { ::BasicObject }

# source://rbs//lib/rbs/namespace.rb#116
module Kernel
  # source://rbs//lib/rbs/namespace.rb#117
  def Namespace(name); end

  # source://rbs//lib/rbs/type_name.rb#91
  def TypeName(string); end
end

# source://rbs//lib/rbs/version.rb#1
module RBS
  class << self
    # source://rbs//lib/rbs.rb#61
    sig { returns(::Logger) }
    def logger; end

    # Returns the value of attribute logger_level.
    #
    # source://rbs//lib/rbs.rb#58
    sig { returns(T.untyped) }
    def logger_level; end

    # source://rbs//lib/rbs.rb#70
    def logger_level=(level); end

    # Returns the value of attribute logger_output.
    #
    # source://rbs//lib/rbs.rb#59
    sig { returns(::IO) }
    def logger_output; end

    # source://rbs//lib/rbs.rb#65
    def logger_output=(val); end

    # source://rbs//lib/rbs.rb#75
    def print_warning; end
  end
end

# source://rbs//lib/rbs/ast/type_param.rb#2
module RBS::AST; end

# source://rbs//lib/rbs/ast/annotation.rb#3
# RBS allows writing annotations of declarations and members.
#
#    %a{annotation_here}
#    class Hello
#      %a{rbs:test:skip}
#      def foo: () -> void
#    end
class RBS::AST::Annotation
  include ::Interfaces::Interface_ToJson

  alias eql? ==

  # @return [Annotation] a new instance of Annotation
  #
  # source://rbs//lib/rbs/ast/annotation.rb#7
  sig { params(string: ::String, location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(string:, location:); end

  # source://rbs//lib/rbs/ast/annotation.rb#12
  def ==(other); end

  # source://rbs//lib/rbs/ast/annotation.rb#12
  def eql?(other); end

  # source://rbs//lib/rbs/ast/annotation.rb#18
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/annotation.rb#5
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute string.
  #
  # source://rbs//lib/rbs/ast/annotation.rb#4
  sig { returns(::String) }
  def string; end

  # source://rbs//lib/rbs/ast/annotation.rb#22
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/comment.rb#3
# RBS allows writing documentation of declarations and members.
#
# ```
# # This is a doc for class.
# class Hello
# end
class RBS::AST::Comment
  include ::Interfaces::Interface_ToJson

  alias eql? ==

  # @return [Comment] a new instance of Comment
  #
  # source://rbs//lib/rbs/ast/comment.rb#7
  sig { params(string: ::String, location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(string:, location:); end

  # source://rbs//lib/rbs/ast/comment.rb#12
  def ==(other); end

  # source://rbs//lib/rbs/ast/comment.rb#12
  def eql?(other); end

  # source://rbs//lib/rbs/ast/comment.rb#18
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/comment.rb#5
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute string.
  #
  # source://rbs//lib/rbs/ast/comment.rb#4
  sig { returns(::String) }
  def string; end

  # source://rbs//lib/rbs/ast/comment.rb#22
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/declarations.rb#3
module RBS::AST::Declarations; end

# source://rbs//lib/rbs/ast/declarations.rb#266
class RBS::AST::Declarations::Alias < ::RBS::AST::Declarations::Base
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/ast/declarations.rb#274
  sig do
    params(
      name: ::RBS::TypeName,
      type_params: ::T::Array[::RBS::AST::TypeParam],
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Alias::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, type_params:, type:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#283
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#270
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#272
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#283
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#292
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#271
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Alias::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#267
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#296
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#269
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#268
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#4
class RBS::AST::Declarations::Base; end

# source://rbs//lib/rbs/ast/declarations.rb#53
class RBS::AST::Declarations::Class < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::NestedDeclarationHelper
  include ::RBS::AST::Declarations::MixinHelper
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Class] a new instance of Class
  #
  # source://rbs//lib/rbs/ast/declarations.rb#95
  def initialize(name:, type_params:, super_class:, members:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#105
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#91
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#93
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#105
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#115
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#92
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Class::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#89
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::Class::TypeAlias_member]) }
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#87
  sig { returns(::RBS::TypeName) }
  def name; end

  # Returns the value of attribute super_class.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#90
  sig { returns(T.nilable(::RBS::AST::Declarations::Class::Super)) }
  def super_class; end

  # source://rbs//lib/rbs/ast/declarations.rb#119
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#88
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#54
class RBS::AST::Declarations::Class::Super
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Super] a new instance of Super
  #
  # source://rbs//lib/rbs/ast/declarations.rb#59
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Class::Super::TypeAlias_loc)
    ).void
  end
  def initialize(name:, args:, location:); end

  # source://rbs//lib/rbs/ast/declarations.rb#65
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#56
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # source://rbs//lib/rbs/ast/declarations.rb#65
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#71
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#57
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Class::Super::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#55
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#75
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/declarations.rb#309
class RBS::AST::Declarations::Constant < ::RBS::AST::Declarations::Base
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Constant] a new instance of Constant
  #
  # source://rbs//lib/rbs/ast/declarations.rb#315
  sig do
    params(
      name: ::RBS::TypeName,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Constant::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#322
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#313
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#322
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#330
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#312
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Constant::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#310
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#334
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#311
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/ast/declarations.rb#345
class RBS::AST::Declarations::Global < ::RBS::AST::Declarations::Base
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Global] a new instance of Global
  #
  # source://rbs//lib/rbs/ast/declarations.rb#351
  sig do
    params(
      name: ::Symbol,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Global::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#358
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#349
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#358
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#366
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#348
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Global::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#346
  sig { returns(::Symbol) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#370
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#347
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/ast/declarations.rb#221
class RBS::AST::Declarations::Interface < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::MixinHelper
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Interface] a new instance of Interface
  #
  # source://rbs//lib/rbs/ast/declarations.rb#231
  sig do
    params(
      name: ::RBS::TypeName,
      type_params: ::T::Array[::RBS::AST::TypeParam],
      members: ::T::Array[::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_member],
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, type_params:, members:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#240
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#225
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#227
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#240
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#249
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#226
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#224
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::Interface::TypeAlias_member]) }
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#222
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#253
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#223
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#33
module RBS::AST::Declarations::MixinHelper
  # source://rbs//lib/rbs/ast/declarations.rb#34
  def each_mixin(&block); end
end

# source://rbs//lib/rbs/ast/declarations.rb#133
class RBS::AST::Declarations::Module < ::RBS::AST::Declarations::Base
  include ::RBS::AST::Declarations::NestedDeclarationHelper
  include ::RBS::AST::Declarations::MixinHelper
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Module] a new instance of Module
  #
  # source://rbs//lib/rbs/ast/declarations.rb#183
  def initialize(name:, type_params:, members:, self_types:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/declarations.rb#193
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#179
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#181
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/declarations.rb#193
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#203
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#178
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Module::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#177
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::Module::TypeAlias_member]) }
  def members; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#175
  sig { returns(::RBS::TypeName) }
  def name; end

  # Returns the value of attribute self_types.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#180
  sig { returns(::T::Array[::RBS::AST::Declarations::Module::Self]) }
  def self_types; end

  # source://rbs//lib/rbs/ast/declarations.rb#207
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#176
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end
end

# source://rbs//lib/rbs/ast/declarations.rb#134
class RBS::AST::Declarations::Module::Self
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Self] a new instance of Self
  #
  # source://rbs//lib/rbs/ast/declarations.rb#139
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::AST::Declarations::Module::Self::TypeAlias_loc)
    ).void
  end
  def initialize(name:, args:, location:); end

  # source://rbs//lib/rbs/ast/declarations.rb#145
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#136
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # source://rbs//lib/rbs/ast/declarations.rb#145
  def eql?(other); end

  # source://rbs//lib/rbs/ast/declarations.rb#151
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#137
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Declarations::Module::Self::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/declarations.rb#135
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/ast/declarations.rb#155
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/declarations.rb#163
  sig { returns(::String) }
  def to_s; end
end

# source://rbs//lib/rbs/ast/declarations.rb#7
module RBS::AST::Declarations::NestedDeclarationHelper
  # source://rbs//lib/rbs/ast/declarations.rb#20
  def each_decl; end

  # source://rbs//lib/rbs/ast/declarations.rb#8
  def each_member; end
end

# source://rbs//lib/rbs/ast/members.rb#3
module RBS::AST::Members; end

# source://rbs//lib/rbs/ast/members.rb#361
class RBS::AST::Members::Alias < ::RBS::AST::Members::Base
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/ast/members.rb#369
  sig do
    params(
      new_name: ::Symbol,
      old_name: ::Symbol,
      kind: ::TypeAliases::RBS::AST::Members::Alias::TypeAlias_kind,
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::Alias::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(new_name:, old_name:, kind:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#378
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#365
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#367
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#378
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#387
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#403
  sig { returns(T::Boolean) }
  def instance?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#364
  sig { returns(::TypeAliases::RBS::AST::Members::Alias::TypeAlias_kind) }
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#366
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::Alias::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute new_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#362
  sig { returns(::Symbol) }
  def new_name; end

  # Returns the value of attribute old_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#363
  sig { returns(::Symbol) }
  def old_name; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#407
  sig { returns(T::Boolean) }
  def singleton?; end

  # source://rbs//lib/rbs/ast/members.rb#391
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#291
class RBS::AST::Members::AttrAccessor < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#294
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#273
class RBS::AST::Members::AttrReader < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#276
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#309
class RBS::AST::Members::AttrWriter < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Attribute
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#312
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#222
module RBS::AST::Members::Attribute
  include ::Interfaces::RBS::Interface_HashEqual

  # source://rbs//lib/rbs/ast/members.rb#232
  sig do
    params(
      name: ::Symbol,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      ivar_name: T.nilable(T.any(::Symbol, T.untyped)),
      kind: ::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_kind,
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment),
      visibility: T.nilable(::TypeAliases::RBS::AST::Members::TypeAlias_visibility)
    ).void
  end
  def initialize(name:, type:, ivar_name:, kind:, annotations:, location:, comment:, visibility: T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/members.rb#243
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#227
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#229
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#243
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#254
  def hash; end

  # Returns the value of attribute ivar_name.
  #
  # source://rbs//lib/rbs/ast/members.rb#226
  sig { returns(T.nilable(T.any(::Symbol, T.untyped))) }
  def ivar_name; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#225
  sig { returns(::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_kind) }
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#228
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#223
  sig { returns(::Symbol) }
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/members.rb#224
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end

  # source://rbs//lib/rbs/ast/members.rb#258
  sig do
    params(
      name: ::Symbol,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      ivar_name: T.nilable(T.any(::Symbol, T.untyped)),
      kind: ::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_kind,
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::Attribute::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment),
      visibility: ::TypeAliases::RBS::AST::Members::TypeAlias_visibility
    ).returns(T.untyped)
  end
  def update(name: T.unsafe(nil), type: T.unsafe(nil), ivar_name: T.unsafe(nil), kind: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # Returns the value of attribute visibility.
  #
  # source://rbs//lib/rbs/ast/members.rb#230
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::TypeAlias_visibility)) }
  def visibility; end
end

# source://rbs//lib/rbs/ast/members.rb#4
# Base class for members.
class RBS::AST::Members::Base; end

# source://rbs//lib/rbs/ast/members.rb#121
class RBS::AST::Members::ClassInstanceVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#124
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#135
class RBS::AST::Members::ClassVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#138
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#192
class RBS::AST::Members::Extend < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#195
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#177
class RBS::AST::Members::Include < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#180
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#107
class RBS::AST::Members::InstanceVariable < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Var
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#110
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#327
module RBS::AST::Members::LocationOnly
  include ::Interfaces::RBS::Interface_HashEqual

  # source://rbs//lib/rbs/ast/members.rb#330
  sig { params(location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(location:); end

  # source://rbs//lib/rbs/ast/members.rb#334
  def ==(other); end

  # source://rbs//lib/rbs/ast/members.rb#334
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#340
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#328
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end
end

# source://rbs//lib/rbs/ast/members.rb#7
class RBS::AST::Members::MethodDefinition < ::RBS::AST::Members::Base
  include ::Interfaces::RBS::Interface_HashEqual
  include ::Interfaces::Interface_ToJson

  # @return [MethodDefinition] a new instance of MethodDefinition
  #
  # source://rbs//lib/rbs/ast/members.rb#17
  sig do
    params(
      name: ::Symbol,
      kind: ::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_kind,
      types: ::T::Array[::RBS::MethodType],
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment),
      overload: ::TypeAliases::TypeAlias_boolish,
      visibility: T.nilable(::TypeAliases::RBS::AST::Members::TypeAlias_visibility)
    ).void
  end
  def initialize(name:, kind:, types:, annotations:, location:, comment:, overload:, visibility: T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/members.rb#28
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#11
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#13
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#28
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#39
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#43
  sig { returns(T::Boolean) }
  def instance?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/ast/members.rb#9
  sig { returns(::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_kind) }
  def kind; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#12
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#8
  sig { returns(::Symbol) }
  def name; end

  # Returns the value of attribute overload.
  #
  # source://rbs//lib/rbs/ast/members.rb#14
  sig { returns(T::Boolean) }
  def overload; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#51
  sig { returns(T::Boolean) }
  def overload?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#47
  sig { returns(T::Boolean) }
  def singleton?; end

  # source://rbs//lib/rbs/ast/members.rb#68
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/ast/members.rb#10
  sig { returns(::T::Array[::RBS::MethodType]) }
  def types; end

  # source://rbs//lib/rbs/ast/members.rb#55
  sig do
    params(
      name: ::Symbol,
      kind: ::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_kind,
      types: ::T::Array[::RBS::MethodType],
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::MethodDefinition::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment),
      overload: ::TypeAliases::TypeAlias_boolish,
      visibility: T.nilable(::TypeAliases::RBS::AST::Members::TypeAlias_visibility)
    ).returns(::RBS::AST::Members::MethodDefinition)
  end
  def update(name: T.unsafe(nil), kind: T.unsafe(nil), types: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), overload: T.unsafe(nil), visibility: T.unsafe(nil)); end

  # Returns the value of attribute visibility.
  #
  # source://rbs//lib/rbs/ast/members.rb#15
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::TypeAlias_visibility)) }
  def visibility; end
end

# source://rbs//lib/rbs/ast/members.rb#149
module RBS::AST::Members::Mixin
  include ::Interfaces::RBS::Interface_HashEqual

  # source://rbs//lib/rbs/ast/members.rb#156
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      annotations: ::T::Array[::RBS::AST::Annotation],
      location: T.nilable(::TypeAliases::RBS::AST::Members::Mixin::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, args:, annotations:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#164
  def ==(other); end

  # Returns the value of attribute annotations.
  #
  # source://rbs//lib/rbs/ast/members.rb#152
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/ast/members.rb#151
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#154
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/members.rb#168
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#172
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#153
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::Mixin::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#150
  sig { returns(::RBS::TypeName) }
  def name; end
end

# source://rbs//lib/rbs/ast/members.rb#207
class RBS::AST::Members::Prepend < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::Mixin
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#210
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#353
class RBS::AST::Members::Private < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::LocationOnly
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#356
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#345
class RBS::AST::Members::Public < ::RBS::AST::Members::Base
  include ::RBS::AST::Members::LocationOnly
  include ::Interfaces::Interface_ToJson

  # source://rbs//lib/rbs/ast/members.rb#348
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/ast/members.rb#83
module RBS::AST::Members::Var
  include ::Interfaces::RBS::Interface_HashEqual

  # source://rbs//lib/rbs/ast/members.rb#89
  sig do
    params(
      name: ::Symbol,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      location: T.nilable(::TypeAliases::RBS::AST::Members::Var::TypeAlias_loc),
      comment: T.nilable(::RBS::AST::Comment)
    ).void
  end
  def initialize(name:, type:, location:, comment:); end

  # source://rbs//lib/rbs/ast/members.rb#96
  def ==(other); end

  # Returns the value of attribute comment.
  #
  # source://rbs//lib/rbs/ast/members.rb#87
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # source://rbs//lib/rbs/ast/members.rb#96
  def eql?(other); end

  # source://rbs//lib/rbs/ast/members.rb#102
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/members.rb#86
  sig { returns(T.nilable(::TypeAliases::RBS::AST::Members::Var::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/members.rb#84
  sig { returns(::Symbol) }
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/ast/members.rb#85
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/ast/type_param.rb#3
class RBS::AST::TypeParam
  include ::Interfaces::Interface_ToJson

  # @return [TypeParam] a new instance of TypeParam
  #
  # source://rbs//lib/rbs/ast/type_param.rb#6
  sig do
    params(
      name: ::Symbol,
      variance: ::TypeAliases::RBS::AST::TypeParam::TypeAlias_variance,
      upper_bound: T.nilable(::TypeAliases::RBS::AST::TypeParam::TypeAlias_bound),
      location: T.nilable(::TypeAliases::RBS::AST::TypeParam::TypeAlias_loc)
    ).void
  end
  def initialize(name:, variance:, upper_bound:, location:); end

  # source://rbs//lib/rbs/ast/type_param.rb#23
  def ==(other); end

  # source://rbs//lib/rbs/ast/type_param.rb#23
  def eql?(other); end

  # source://rbs//lib/rbs/ast/type_param.rb#33
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#4
  sig { returns(T.nilable(::TypeAliases::RBS::AST::TypeParam::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/ast/type_param.rb#56
  def map_type(&block); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#4
  sig { returns(::Symbol) }
  def name; end

  # source://rbs//lib/rbs/ast/type_param.rb#47
  def rename(name); end

  # source://rbs//lib/rbs/ast/type_param.rb#37
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/ast/type_param.rb#108
  sig { returns(::String) }
  def to_s; end

  # source://rbs//lib/rbs/ast/type_param.rb#14
  def unchecked!(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/ast/type_param.rb#19
  sig { returns(T::Boolean) }
  def unchecked?; end

  # Returns the value of attribute upper_bound.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#4
  sig { returns(T.nilable(::TypeAliases::RBS::AST::TypeParam::TypeAlias_bound)) }
  def upper_bound; end

  # Returns the value of attribute variance.
  #
  # source://rbs//lib/rbs/ast/type_param.rb#4
  sig { returns(::TypeAliases::RBS::AST::TypeParam::TypeAlias_variance) }
  def variance; end

  class << self
    # source://rbs//lib/rbs/ast/type_param.rb#91
    def rename(params, new_names:); end

    # source://rbs//lib/rbs/ast/type_param.rb#69
    def resolve_variables(params); end

    # source://rbs//lib/rbs/ast/type_param.rb#79
    def subst_var(vars, type); end
  end
end

# source://rbs//lib/rbs/ancestor_graph.rb#2
class RBS::AncestorGraph
  # @return [AncestorGraph] a new instance of AncestorGraph
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#11
  sig { params(env: ::RBS::Environment, ancestor_builder: ::RBS::DefinitionBuilder::AncestorBuilder).void }
  def initialize(env:, ancestor_builder: T.unsafe(nil)); end

  # Returns the value of attribute ancestor_builder.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#7
  sig { returns(::RBS::DefinitionBuilder::AncestorBuilder) }
  def ancestor_builder; end

  # source://rbs//lib/rbs/ancestor_graph.rb#17
  sig { void }
  def build; end

  # source://rbs//lib/rbs/ancestor_graph.rb#30
  def build_ancestors(node, ancestors); end

  # Returns the value of attribute children.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#9
  sig do
    returns(::T::Hash[::TypeAliases::RBS::AncestorGraph::TypeAlias_node, ::T::Set[::TypeAliases::RBS::AncestorGraph::TypeAlias_node]])
  end
  def children; end

  # source://rbs//lib/rbs/ancestor_graph.rb#62
  def each_ancestor(node, yielded: T.unsafe(nil), &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#54
  def each_child(node, &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#76
  def each_descendant(node, yielded: T.unsafe(nil), &block); end

  # source://rbs//lib/rbs/ancestor_graph.rb#46
  def each_parent(node, &block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#6
  sig { returns(::RBS::Environment) }
  def env; end

  # Returns the value of attribute parents.
  #
  # source://rbs//lib/rbs/ancestor_graph.rb#8
  sig do
    returns(::T::Hash[::TypeAliases::RBS::AncestorGraph::TypeAlias_node, ::T::Set[::TypeAliases::RBS::AncestorGraph::TypeAlias_node]])
  end
  def parents; end

  # source://rbs//lib/rbs/ancestor_graph.rb#41
  sig do
    params(
      parent: ::TypeAliases::RBS::AncestorGraph::TypeAlias_node,
      child: ::TypeAliases::RBS::AncestorGraph::TypeAlias_node
    ).void
  end
  def register(parent:, child:); end
end

# source://rbs//lib/rbs/ancestor_graph.rb#3
class RBS::AncestorGraph::InstanceNode < ::Struct
  sig { params(type_name: ::RBS::TypeName).void }
  def initialize(type_name:); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/ancestor_graph.rb#4
class RBS::AncestorGraph::SingletonNode < ::Struct
  sig { params(type_name: ::RBS::TypeName).void }
  def initialize(type_name:); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/errors.rb#17
# Error class for errors defined in RBS.
#
class RBS::BaseError < ::StandardError; end

# source://rbs//lib/rbs/buffer.rb#2
class RBS::Buffer
  # @return [Buffer] a new instance of Buffer
  #
  # source://rbs//lib/rbs/buffer.rb#6
  sig { params(name: T.untyped, content: ::String).void }
  def initialize(name:, content:); end

  # Returns the value of attribute content.
  #
  # source://rbs//lib/rbs/buffer.rb#4
  sig { returns(::String) }
  def content; end

  # source://rbs//lib/rbs/buffer.rb#56
  def inspect; end

  # source://rbs//lib/rbs/buffer.rb#52
  sig { returns(::Integer) }
  def last_position; end

  # source://rbs//lib/rbs/buffer.rb#11
  sig { returns(::T::Array[::String]) }
  def lines; end

  # source://rbs//lib/rbs/buffer.rb#42
  def loc_to_pos(loc); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/buffer.rb#3
  sig { returns(T.untyped) }
  def name; end

  # source://rbs//lib/rbs/buffer.rb#30
  def pos_to_loc(pos); end

  # source://rbs//lib/rbs/buffer.rb#15
  sig { returns(::T::Array[::T::Range[::Integer]]) }
  def ranges; end
end

# source://rbs//lib/rbs/builtin_names.rb#2
module RBS::BuiltinNames; end

# source://rbs//lib/rbs/builtin_names.rb#43
RBS::BuiltinNames::Array = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#35
RBS::BuiltinNames::BasicObject = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#41
RBS::BuiltinNames::Class = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#39
RBS::BuiltinNames::Comparable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#40
RBS::BuiltinNames::Enumerable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#46
RBS::BuiltinNames::Enumerator = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#53
RBS::BuiltinNames::FalseClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#50
RBS::BuiltinNames::Float = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#44
RBS::BuiltinNames::Hash = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#49
RBS::BuiltinNames::Integer = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#37
RBS::BuiltinNames::Kernel = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#42
RBS::BuiltinNames::Module = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#3
class RBS::BuiltinNames::Name
  # @return [Name] a new instance of Name
  #
  # source://rbs//lib/rbs/builtin_names.rb#6
  sig { params(name: ::RBS::TypeName).void }
  def initialize(name:); end

  # source://rbs//lib/rbs/builtin_names.rb#14
  def instance_type(*args); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/builtin_names.rb#18
  def instance_type?(type); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/builtin_names.rb#4
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/builtin_names.rb#22
  sig { returns(::RBS::Types::ClassSingleton) }
  def singleton_type; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/builtin_names.rb#26
  def singleton_type?(type); end

  # source://rbs//lib/rbs/builtin_names.rb#10
  sig { returns(::String) }
  def to_s; end

  class << self
    # source://rbs//lib/rbs/builtin_names.rb#30
    def define(name, namespace: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/builtin_names.rb#54
RBS::BuiltinNames::Numeric = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#36
RBS::BuiltinNames::Object = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#45
RBS::BuiltinNames::Range = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#51
RBS::BuiltinNames::Regexp = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#47
RBS::BuiltinNames::Set = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#38
RBS::BuiltinNames::String = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#48
RBS::BuiltinNames::Symbol = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/builtin_names.rb#52
RBS::BuiltinNames::TrueClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

# source://rbs//lib/rbs/collection/sources/git.rb#6
module RBS::Collection; end

# source://rbs//lib/rbs/collection/cleaner.rb#3
class RBS::Collection::Cleaner
  # @return [Cleaner] a new instance of Cleaner
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#6
  sig { params(lockfile_path: ::Pathname).void }
  def initialize(lockfile_path:); end

  # source://rbs//lib/rbs/collection/cleaner.rb#10
  sig { void }
  def clean; end

  # Returns the value of attribute lock.
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#4
  sig { returns(::RBS::Collection::Config) }
  def lock; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/cleaner.rb#21
  def needed?(gem_name, version); end
end

# This class represent the configration file.
#
# source://rbs//lib/rbs/collection/config.rb#5
# This class represent the configration file.
class RBS::Collection::Config
  # @return [Config] a new instance of Config
  #
  # source://rbs//lib/rbs/collection/config.rb#36
  def initialize(data, config_path:); end

  # source://rbs//lib/rbs/collection/config.rb#41
  def add_gem(gem); end

  # It raises an error when there are non-available libraries
  #
  # @raise [CollectionNotAvailable]
  #
  # source://rbs//lib/rbs/collection/config.rb#71
  sig { void }
  def check_rbs_availability!; end

  # source://rbs//lib/rbs/collection/config.rb#62
  def dump_to(io); end

  # source://rbs//lib/rbs/collection/config.rb#45
  def gem(gem_name); end

  # source://rbs//lib/rbs/collection/config.rb#66
  sig { returns(::T::Array[T.untyped]) }
  def gems; end

  # source://rbs//lib/rbs/collection/config.rb#49
  sig { returns(::Pathname) }
  def repo_path; end

  # source://rbs//lib/rbs/collection/config.rb#53
  sig { returns(::T::Array[::Interfaces::RBS::Collection::Sources::Interface_Source]) }
  def sources; end

  class << self
    # source://rbs//lib/rbs/collection/config.rb#23
    def from_path(path); end

    # Generate a rbs lockfile from Gemfile.lock to `config_path`.
    # If `with_lockfile` is true, it respects existing rbs lockfile.
    #
    # source://rbs//lib/rbs/collection/config.rb#19
    sig do
      params(
        config_path: ::Pathname,
        gemfile_lock_path: ::Pathname,
        with_lockfile: ::TypeAliases::TypeAlias_boolish
      ).returns(::RBS::Collection::Config)
    end
    def generate_lockfile(config_path:, gemfile_lock_path:, with_lockfile: T.unsafe(nil)); end

    # source://rbs//lib/rbs/collection/config.rb#27
    def lockfile_of(config_path); end

    # source://rbs//lib/rbs/collection/config.rb#32
    def to_lockfile_path(config_path); end
  end
end

# source://rbs//lib/rbs/collection/config.rb#6
class RBS::Collection::Config::CollectionNotAvailable < ::StandardError
  # @return [CollectionNotAvailable] a new instance of CollectionNotAvailable
  #
  # source://rbs//lib/rbs/collection/config.rb#7
  def initialize; end
end

# source://rbs//lib/rbs/collection/config/lockfile_generator.rb#6
class RBS::Collection::Config::LockfileGenerator
  # @return [LockfileGenerator] a new instance of LockfileGenerator
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#13
  sig do
    params(
      config_path: ::Pathname,
      gemfile_lock_path: ::Pathname,
      with_lockfile: ::TypeAliases::TypeAlias_boolish
    ).void
  end
  def initialize(config_path:, gemfile_lock_path:, with_lockfile:); end

  # Returns the value of attribute config.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#7
  sig { returns(::RBS::Collection::Config) }
  def config; end

  # Returns the value of attribute gemfile_lock.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#7
  sig { returns(::Bundler::LockfileParser) }
  def gemfile_lock; end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#21
  sig { returns(::RBS::Collection::Config) }
  def generate; end

  # Returns the value of attribute lock.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#7
  sig { returns(T.nilable(::RBS::Collection::Config)) }
  def lock; end

  # Returns the value of attribute lock_path.
  #
  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#7
  sig { returns(::Pathname) }
  def lock_path; end

  private

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#39
  sig { params(name: ::String, version: T.nilable(::String)).void }
  def assign_gem(name:, version:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#93
  sig { params(version: T.nilable(::String), versions: ::T::Array[::String]).returns(::Gem::Version) }
  def find_best_version(version:, versions:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#87
  sig { params(name: ::String).returns(T.untyped) }
  def find_source(name:); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#81
  def gemfile_lock_gems(&block); end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#77
  sig { void }
  def remove_ignored_gems!; end

  # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#69
  def upsert_gem(old, new); end

  class << self
    # source://rbs//lib/rbs/collection/config/lockfile_generator.rb#9
    sig do
      params(
        config_path: ::Pathname,
        gemfile_lock_path: ::Pathname,
        with_lockfile: ::TypeAliases::TypeAlias_boolish
      ).returns(::RBS::Collection::Config)
    end
    def generate(config_path:, gemfile_lock_path:, with_lockfile: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/collection/config.rb#15
RBS::Collection::Config::PATH = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/collection/installer.rb#3
class RBS::Collection::Installer
  # @return [Installer] a new instance of Installer
  #
  # source://rbs//lib/rbs/collection/installer.rb#7
  sig { params(lockfile_path: ::Pathname, stdout: ::Interfaces::RBS::CLI::Interface_IO).void }
  def initialize(lockfile_path:, stdout: T.unsafe(nil)); end

  # source://rbs//lib/rbs/collection/installer.rb#12
  sig { void }
  def install_from_lockfile; end

  # Returns the value of attribute lockfile.
  #
  # source://rbs//lib/rbs/collection/installer.rb#4
  sig { returns(::RBS::Collection::Config) }
  def lockfile; end

  # Returns the value of attribute stdout.
  #
  # source://rbs//lib/rbs/collection/installer.rb#5
  sig { returns(::Interfaces::RBS::CLI::Interface_IO) }
  def stdout; end

  private

  # source://rbs//lib/rbs/collection/installer.rb#21
  def source_for(config_entry); end
end

# source://rbs//lib/rbs/collection/sources/git.rb#7
module RBS::Collection::Sources
  class << self
    # source://rbs//lib/rbs/collection/sources.rb#8
    def from_config_entry(source_entry); end
  end
end

# source://rbs//lib/rbs/collection/sources/git.rb#8
class RBS::Collection::Sources::Git
  # @return [Git] a new instance of Git
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#15
  sig { params(name: ::String, revision: ::String, remote: ::String, repo_dir: T.nilable(::String)).void }
  def initialize(name:, revision:, remote:, repo_dir:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#23
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/git.rb#33
  sig do
    params(
      dest: ::Pathname,
      config_entry: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry,
      stdout: ::Interfaces::RBS::CLI::Interface_IO
    ).void
  end
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#53
  def manifest_of(config_entry); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#13
  sig { returns(::String) }
  def name; end

  # Returns the value of attribute remote.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#13
  sig { returns(::String) }
  def remote; end

  # Returns the value of attribute repo_dir.
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#13
  sig { returns(::String) }
  def repo_dir; end

  # source://rbs//lib/rbs/collection/sources/git.rb#87
  sig { returns(::TypeAliases::RBS::Collection::Sources::Git::TypeAlias_source_entry) }
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/git.rb#28
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/git.rb#62
  sig { params(dest: ::Pathname, config_entry: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry).void }
  def _install(dest:, config_entry:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#73
  def cp_r(src, dest); end

  # source://rbs//lib/rbs/collection/sources/git.rb#97
  def format_config_entry(config_entry); end

  # source://rbs//lib/rbs/collection/sources/git.rb#150
  sig { returns(::Pathname) }
  def gem_repo_dir; end

  # source://rbs//lib/rbs/collection/sources/git.rb#162
  sig { params(cmd: ::String, opt: T.untyped).returns(::String) }
  def git(*cmd, **opt); end

  # source://rbs//lib/rbs/collection/sources/git.rb#140
  sig { returns(::Pathname) }
  def git_dir; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/git.rb#129
  def need_to_fetch?(revision); end

  # source://rbs//lib/rbs/collection/sources/git.rb#158
  sig { returns(::String) }
  def resolve_revision; end

  # source://rbs//lib/rbs/collection/sources/git.rb#154
  sig { returns(::String) }
  def resolved_revision; end

  # source://rbs//lib/rbs/collection/sources/git.rb#107
  sig { params(revision: ::String).void }
  def setup!(revision:); end

  # source://rbs//lib/rbs/collection/sources/git.rb#166
  sig { params(cmd: ::String, opt: T.untyped).returns(::String) }
  def sh!(*cmd, **opt); end

  sig { type_parameters(:T).params(blk: T.proc.returns(T.type_parameter(:T))).returns(T.type_parameter(:T)) }
  def with_revision(&blk); end
end

# source://rbs//lib/rbs/collection/sources/git.rb#11
class RBS::Collection::Sources::Git::CommandError < ::StandardError; end

# source://rbs//lib/rbs/collection/sources/git.rb#9
RBS::Collection::Sources::Git::METADATA_FILENAME = T.let(T.unsafe(nil), String)

# Signatures that are inclduded in gem package as sig/ directory.
#
# source://rbs//lib/rbs/collection/sources/rubygems.rb#7
# sig/ directory
class RBS::Collection::Sources::Rubygems
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/rubygems.rb#10
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#20
  sig do
    params(
      dest: ::Pathname,
      config_entry: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry,
      stdout: ::Interfaces::RBS::CLI::Interface_IO
    ).void
  end
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#28
  def manifest_of(config_entry); end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#35
  sig { returns(::TypeAliases::RBS::Collection::Sources::Rubygems::TypeAlias_source_entry) }
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#14
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/rubygems.rb#41
  def gem_sig_path(config_entry); end

  class << self
    # polyfill of singleton module
    sig { returns(T.attached_class) }
    def instance; end
  end
end

# signatures that are bundled in rbs gem under the stdlib/ directory
#
# source://rbs//lib/rbs/collection/sources/stdlib.rb#7
# signatures that are bundled in rbs gem under the stdlib/ directory
class RBS::Collection::Sources::Stdlib
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/collection/sources/stdlib.rb#10
  def has?(config_entry); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#18
  sig do
    params(
      dest: ::Pathname,
      config_entry: ::TypeAliases::RBS::Collection::Config::TypeAlias_gem_entry,
      stdout: ::Interfaces::RBS::CLI::Interface_IO
    ).void
  end
  def install(dest:, config_entry:, stdout:); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#26
  def manifest_of(config_entry); end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#32
  sig { returns(::TypeAliases::RBS::Collection::Sources::Stdlib::TypeAlias_source_entry) }
  def to_lockfile; end

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#14
  def versions(config_entry); end

  private

  # source://rbs//lib/rbs/collection/sources/stdlib.rb#38
  def gem_dir(config_entry); end

  class << self
    # polyfill of singleton module
    sig { returns(T.attached_class) }
    def instance; end
  end
end

# source://rbs//lib/rbs/constant.rb#2
class RBS::Constant
  alias eql? ==

  # @return [Constant] a new instance of Constant
  #
  # source://rbs//lib/rbs/constant.rb#7
  sig do
    params(
      name: ::RBS::TypeName,
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      entry: ::TypeAliases::RBS::Constant::TypeAlias_constant_entry
    ).void
  end
  def initialize(name:, type:, entry:); end

  # source://rbs//lib/rbs/constant.rb#13
  def ==(other); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/constant.rb#5
  sig { returns(::TypeAliases::RBS::Constant::TypeAlias_constant_entry) }
  def entry; end

  # source://rbs//lib/rbs/constant.rb#13
  def eql?(other); end

  # source://rbs//lib/rbs/constant.rb#22
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/constant.rb#3
  sig { returns(::RBS::TypeName) }
  def name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/constant.rb#4
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/constant_table.rb#2
class RBS::ConstantTable
  # @return [ConstantTable] a new instance of ConstantTable
  #
  # source://rbs//lib/rbs/constant_table.rb#14
  sig { params(builder: ::RBS::DefinitionBuilder).void }
  def initialize(builder:); end

  # source://rbs//lib/rbs/constant_table.rb#19
  def absolute_type(type, context:); end

  # source://rbs//lib/rbs/constant_table.rb#25
  def absolute_type_name(type_name, context:, location:); end

  # source://rbs//lib/rbs/constant_table.rb#106
  def constant_scopes(name); end

  # source://rbs//lib/rbs/constant_table.rb#129
  def constant_scopes0(name, scopes: T.unsafe(nil)); end

  # Returns the value of attribute constant_scopes_cache.
  #
  # source://rbs//lib/rbs/constant_table.rb#4
  sig { returns(::T::Hash[::RBS::TypeName, ::T::Array[::RBS::Namespace]]) }
  def constant_scopes_cache; end

  # source://rbs//lib/rbs/constant_table.rb#110
  def constant_scopes_module(name, scopes:); end

  # Returns the value of attribute definition_builder.
  #
  # source://rbs//lib/rbs/constant_table.rb#3
  sig { returns(::RBS::DefinitionBuilder) }
  def definition_builder; end

  # source://rbs//lib/rbs/constant_table.rb#6
  sig { returns(::RBS::Environment) }
  def env; end

  # source://rbs//lib/rbs/constant_table.rb#30
  def name_to_constant(name); end

  # source://rbs//lib/rbs/constant_table.rb#45
  def resolve_constant_reference(name, context:); end

  # source://rbs//lib/rbs/constant_table.rb#76
  def resolve_constant_reference_context(name, context:); end

  # source://rbs//lib/rbs/constant_table.rb#89
  def resolve_constant_reference_inherit(name, scopes:, no_object: T.unsafe(nil)); end

  # source://rbs//lib/rbs/constant_table.rb#10
  sig { returns(::RBS::TypeNameResolver) }
  def resolver; end

  # source://rbs//lib/rbs/constant_table.rb#41
  def split_name(name); end
end

# source://rbs//lib/rbs/errors.rb#447
class RBS::CyclicTypeParameterBound < ::RBS::BaseError
  # @return [CyclicTypeParameterBound] a new instance of CyclicTypeParameterBound
  #
  # source://rbs//lib/rbs/errors.rb#450
  sig do
    params(
      type_name: ::RBS::TypeName,
      method_name: T.nilable(::Symbol),
      params: ::T::Array[::RBS::AST::TypeParam],
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(type_name:, method_name:, params:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#448
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#448
  sig { returns(T.nilable(::Symbol)) }
  def method_name; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/errors.rb#448
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#448
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#2
class RBS::Definition
  # @return [Definition] a new instance of Definition
  #
  # source://rbs//lib/rbs/definition.rb#275
  sig do
    params(
      type_name: ::RBS::TypeName,
      entry: ::TypeAliases::RBS::Definition::TypeAlias_definition_entry,
      self_type: ::TypeAliases::RBS::Definition::TypeAlias_self_type,
      ancestors: T.nilable(T.any(::RBS::Definition::InstanceAncestors, ::RBS::Definition::SingletonAncestors))
    ).void
  end
  def initialize(type_name:, entry:, self_type:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#269
  sig { returns(T.nilable(T.any(::RBS::Definition::InstanceAncestors, ::RBS::Definition::SingletonAncestors))) }
  def ancestors; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#298
  sig { returns(T::Boolean) }
  def class?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#315
  sig { returns(T::Boolean) }
  def class_type?; end

  # Returns the value of attribute class_variables.
  #
  # source://rbs//lib/rbs/definition.rb#273
  sig { returns(::T::Hash[::Symbol, ::RBS::Definition::Variable]) }
  def class_variables; end

  # source://rbs//lib/rbs/definition.rb#360
  def each_type(&block); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/definition.rb#268
  sig { returns(::TypeAliases::RBS::Definition::TypeAlias_definition_entry) }
  def entry; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#319
  sig { returns(T::Boolean) }
  def instance_type?; end

  # Returns the value of attribute instance_variables.
  #
  # source://rbs//lib/rbs/definition.rb#272
  sig { returns(::T::Hash[::Symbol, ::RBS::Definition::Variable]) }
  def instance_variables; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#306
  sig { returns(T::Boolean) }
  def interface?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#323
  sig { returns(T::Boolean) }
  def interface_type?; end

  # source://rbs//lib/rbs/definition.rb#350
  def map_method_type(&block); end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition.rb#271
  sig { returns(::T::Hash[::Symbol, ::RBS::Definition::Method]) }
  def methods; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#302
  sig { returns(T::Boolean) }
  def module?; end

  # Returns the value of attribute self_type.
  #
  # source://rbs//lib/rbs/definition.rb#270
  sig { returns(::TypeAliases::RBS::Definition::TypeAlias_self_type) }
  def self_type; end

  # source://rbs//lib/rbs/definition.rb#340
  def sub(s); end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#267
  sig { returns(::RBS::TypeName) }
  def type_name; end

  # source://rbs//lib/rbs/definition.rb#327
  sig { returns(::T::Array[::Symbol]) }
  def type_params; end

  # source://rbs//lib/rbs/definition.rb#331
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params_decl; end
end

# source://rbs//lib/rbs/definition.rb#177
module RBS::Definition::Ancestor; end

# source://rbs//lib/rbs/definition.rb#178
class RBS::Definition::Ancestor::Instance
  # @return [Instance] a new instance of Instance
  #
  # source://rbs//lib/rbs/definition.rb#181
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      source: ::TypeAliases::RBS::Definition::Ancestor::Instance::TypeAlias_source
    ).void
  end
  def initialize(name:, args:, source:); end

  # source://rbs//lib/rbs/definition.rb#187
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/definition.rb#179
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # source://rbs//lib/rbs/definition.rb#187
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#193
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/definition.rb#179
  sig { returns(::RBS::TypeName) }
  def name; end

  # Returns the value of attribute source.
  #
  # source://rbs//lib/rbs/definition.rb#179
  sig { returns(::TypeAliases::RBS::Definition::Ancestor::Instance::TypeAlias_source) }
  def source; end
end

# source://rbs//lib/rbs/definition.rb#198
class RBS::Definition::Ancestor::Singleton
  # @return [Singleton] a new instance of Singleton
  #
  # source://rbs//lib/rbs/definition.rb#201
  sig { params(name: ::RBS::TypeName).void }
  def initialize(name:); end

  # source://rbs//lib/rbs/definition.rb#205
  def ==(other); end

  # source://rbs//lib/rbs/definition.rb#205
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#211
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/definition.rb#199
  sig { returns(::RBS::TypeName) }
  def name; end
end

# source://rbs//lib/rbs/definition.rb#217
class RBS::Definition::InstanceAncestors
  # @return [InstanceAncestors] a new instance of InstanceAncestors
  #
  # source://rbs//lib/rbs/definition.rb#222
  sig do
    params(
      type_name: ::RBS::TypeName,
      params: ::T::Array[::Symbol],
      ancestors: ::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t]
    ).void
  end
  def initialize(type_name:, params:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#220
  sig { returns(::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t]) }
  def ancestors; end

  # source://rbs//lib/rbs/definition.rb#228
  def apply(args, location:); end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/definition.rb#219
  sig { returns(::T::Array[::Symbol]) }
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#218
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#23
class RBS::Definition::Method
  # @return [Method] a new instance of Method
  #
  # source://rbs//lib/rbs/definition.rb#79
  sig do
    params(
      super_method: T.nilable(::RBS::Definition::Method),
      defs: ::T::Array[::RBS::Definition::Method::TypeDef],
      accessibility: ::TypeAliases::RBS::Definition::TypeAlias_accessibility,
      alias_of: T.nilable(::RBS::Definition::Method),
      annotations: ::T::Array[::RBS::AST::Annotation]
    ).void
  end
  def initialize(super_method:, defs:, accessibility:, alias_of:, annotations: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition.rb#87
  def ==(other); end

  # Returns the value of attribute accessibility.
  #
  # source://rbs//lib/rbs/definition.rb#75
  sig { returns(::TypeAliases::RBS::Definition::TypeAlias_accessibility) }
  def accessibility; end

  # Returns the value of attribute alias_of.
  #
  # source://rbs//lib/rbs/definition.rb#77
  sig { returns(T.nilable(::RBS::Definition::Method)) }
  def alias_of; end

  # source://rbs//lib/rbs/definition.rb#124
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # source://rbs//lib/rbs/definition.rb#120
  sig { returns(::T::Array[::RBS::AST::Comment]) }
  def comments; end

  # source://rbs//lib/rbs/definition.rb#102
  sig { returns(T.nilable(::RBS::TypeName)) }
  def defined_in; end

  # Returns the value of attribute defs.
  #
  # source://rbs//lib/rbs/definition.rb#74
  sig { returns(::T::Array[::RBS::Definition::Method::TypeDef]) }
  def defs; end

  # source://rbs//lib/rbs/definition.rb#87
  def eql?(other); end

  # Returns the value of attribute extra_annotations.
  #
  # source://rbs//lib/rbs/definition.rb#76
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def extra_annotations; end

  # source://rbs//lib/rbs/definition.rb#98
  def hash; end

  # source://rbs//lib/rbs/definition.rb#109
  sig { returns(T.nilable(::RBS::TypeName)) }
  def implemented_in; end

  # source://rbs//lib/rbs/definition.rb#167
  def map_method_type(&block); end

  # source://rbs//lib/rbs/definition.rb#149
  def map_type(&block); end

  # source://rbs//lib/rbs/definition.rb#158
  def map_type_bound(&block); end

  # source://rbs//lib/rbs/definition.rb#128
  sig { returns(::T::Array[::TypeAliases::RBS::Definition::Method::TypeAlias_method_member]) }
  def members; end

  # source://rbs//lib/rbs/definition.rb#116
  sig { returns(::T::Array[::RBS::MethodType]) }
  def method_types; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#136
  sig { returns(T::Boolean) }
  def private?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#132
  sig { returns(T::Boolean) }
  def public?; end

  # source://rbs//lib/rbs/definition.rb#140
  def sub(s); end

  # Returns the value of attribute super_method.
  #
  # source://rbs//lib/rbs/definition.rb#73
  sig { returns(T.nilable(::RBS::Definition::Method)) }
  def super_method; end
end

# source://rbs//lib/rbs/definition.rb#24
class RBS::Definition::Method::TypeDef
  # @return [TypeDef] a new instance of TypeDef
  #
  # source://rbs//lib/rbs/definition.rb#30
  sig do
    params(
      type: ::RBS::MethodType,
      member: ::TypeAliases::RBS::Definition::Method::TypeAlias_method_member,
      defined_in: ::RBS::TypeName,
      implemented_in: T.nilable(::RBS::TypeName)
    ).void
  end
  def initialize(type:, member:, defined_in:, implemented_in:); end

  # source://rbs//lib/rbs/definition.rb#37
  def ==(other); end

  # source://rbs//lib/rbs/definition.rb#55
  sig { returns(::T::Array[::RBS::AST::Annotation]) }
  def annotations; end

  # source://rbs//lib/rbs/definition.rb#51
  sig { returns(T.nilable(::RBS::AST::Comment)) }
  def comment; end

  # Returns the value of attribute defined_in.
  #
  # source://rbs//lib/rbs/definition.rb#27
  sig { returns(::RBS::TypeName) }
  def defined_in; end

  # source://rbs//lib/rbs/definition.rb#37
  def eql?(other); end

  # source://rbs//lib/rbs/definition.rb#47
  def hash; end

  # Returns the value of attribute implemented_in.
  #
  # source://rbs//lib/rbs/definition.rb#28
  sig { returns(T.nilable(::RBS::TypeName)) }
  def implemented_in; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/definition.rb#26
  sig { returns(::TypeAliases::RBS::Definition::Method::TypeAlias_method_member) }
  def member; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/definition.rb#63
  sig { returns(T::Boolean) }
  def overload?; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition.rb#25
  sig { returns(::RBS::MethodType) }
  def type; end

  # source://rbs//lib/rbs/definition.rb#59
  sig do
    params(
      type: ::RBS::MethodType,
      member: ::TypeAliases::RBS::Definition::Method::TypeAlias_method_member,
      defined_in: ::RBS::TypeName,
      implemented_in: T.nilable(::RBS::TypeName)
    ).returns(::RBS::Definition::Method::TypeDef)
  end
  def update(type: T.unsafe(nil), member: T.unsafe(nil), defined_in: T.unsafe(nil), implemented_in: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/definition.rb#257
class RBS::Definition::SingletonAncestors
  # @return [SingletonAncestors] a new instance of SingletonAncestors
  #
  # source://rbs//lib/rbs/definition.rb#261
  sig do
    params(
      type_name: ::RBS::TypeName,
      ancestors: ::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t]
    ).void
  end
  def initialize(type_name:, ancestors:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/definition.rb#259
  sig { returns(::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t]) }
  def ancestors; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition.rb#258
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/definition.rb#3
class RBS::Definition::Variable
  # @return [Variable] a new instance of Variable
  #
  # source://rbs//lib/rbs/definition.rb#8
  sig do
    params(
      parent_variable: T.nilable(::RBS::Definition::Variable),
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      declared_in: ::RBS::TypeName
    ).void
  end
  def initialize(parent_variable:, type:, declared_in:); end

  # Returns the value of attribute declared_in.
  #
  # source://rbs//lib/rbs/definition.rb#6
  sig { returns(::RBS::TypeName) }
  def declared_in; end

  # Returns the value of attribute parent_variable.
  #
  # source://rbs//lib/rbs/definition.rb#4
  sig { returns(T.nilable(::RBS::Definition::Variable)) }
  def parent_variable; end

  # source://rbs//lib/rbs/definition.rb#14
  def sub(s); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition.rb#5
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/definition_builder.rb#2
class RBS::DefinitionBuilder
  # @return [DefinitionBuilder] a new instance of DefinitionBuilder
  #
  # source://rbs//lib/rbs/definition_builder.rb#13
  sig do
    params(
      env: ::RBS::Environment,
      ancestor_builder: T.nilable(::RBS::DefinitionBuilder::AncestorBuilder),
      method_builder: T.nilable(::RBS::DefinitionBuilder::MethodBuilder)
    ).void
  end
  def initialize(env:, ancestor_builder: T.unsafe(nil), method_builder: T.unsafe(nil)); end

  # Returns the value of attribute ancestor_builder.
  #
  # source://rbs//lib/rbs/definition_builder.rb#5
  sig { returns(::RBS::DefinitionBuilder::AncestorBuilder) }
  def ancestor_builder; end

  # source://rbs//lib/rbs/definition_builder.rb#135
  def build_instance(type_name, no_self_types: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#33
  def build_interface(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#363
  def build_singleton(type_name); end

  # Builds a definition for singleton without .new method.
  #
  # source://rbs//lib/rbs/definition_builder.rb#266
  def build_singleton0(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#567
  def define_methods(definition, interface_methods:, methods:, super_interface_method:); end

  # source://rbs//lib/rbs/definition_builder.rb#25
  def ensure_namespace!(namespace, location:); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder.rb#3
  sig { returns(::RBS::Environment) }
  def env; end

  # source://rbs//lib/rbs/definition_builder.rb#801
  def expand_alias(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#805
  def expand_alias1(type_name); end

  # source://rbs//lib/rbs/definition_builder.rb#811
  def expand_alias2(type_name, args); end

  # source://rbs//lib/rbs/definition_builder.rb#559
  def insert_variable(type_name, variables, name:, type:); end

  # Returns the value of attribute instance_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#8
  sig { returns(::T::Hash[[::RBS::TypeName, T::Boolean], T.nilable(T.any(::RBS::Definition, T.untyped))]) }
  def instance_cache; end

  # Returns the value of attribute interface_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#11
  sig { returns(::T::Hash[::RBS::TypeName, T.nilable(T.any(::RBS::Definition, T.untyped))]) }
  def interface_cache; end

  # source://rbs//lib/rbs/definition_builder.rb#723
  sig do
    params(
      src: ::RBS::Definition,
      dest: ::RBS::Definition,
      subst: ::RBS::Substitution,
      implemented_in: T.nilable(T.any(::RBS::TypeName, T.untyped)),
      keep_super: T::Boolean
    ).void
  end
  def merge_definition(src:, dest:, subst:, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#747
  def merge_method(type_name, methods, name, method, sub, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end

  # source://rbs//lib/rbs/definition_builder.rb#737
  def merge_variable(variables, name, variable, sub, keep_super: T.unsafe(nil)); end

  # Returns the value of attribute method_builder.
  #
  # source://rbs//lib/rbs/definition_builder.rb#6
  sig { returns(::RBS::DefinitionBuilder::MethodBuilder) }
  def method_builder; end

  # Returns the value of attribute singleton0_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#10
  sig { returns(::T::Hash[::RBS::TypeName, T.nilable(T.any(::RBS::Definition, T.untyped))]) }
  def singleton0_cache; end

  # Returns the value of attribute singleton_cache.
  #
  # source://rbs//lib/rbs/definition_builder.rb#9
  sig { returns(::T::Hash[::RBS::TypeName, T.nilable(T.any(::RBS::Definition, T.untyped))]) }
  def singleton_cache; end

  # source://rbs//lib/rbs/definition_builder.rb#463
  def source_location(source, decl); end

  # source://rbs//lib/rbs/definition_builder.rb#794
  def try_cache(type_name, cache:, key: T.unsafe(nil)); end

  # Returns the value of attribute type_name_resolver.
  #
  # source://rbs//lib/rbs/definition_builder.rb#4
  sig { returns(::RBS::TypeNameResolver) }
  def type_name_resolver; end

  # source://rbs//lib/rbs/definition_builder.rb#834
  def update(env:, except:, ancestor_builder:); end

  # source://rbs//lib/rbs/definition_builder.rb#453
  def validate_params_with(type_params, result:); end

  sig { params(_arg0: ::RBS::TypeName, _arg1: ::RBS::Environment::ClassEntry).void }
  def validate_super_class!(_arg0, _arg1); end

  # @raise [NoTypeFoundError]
  #
  # source://rbs//lib/rbs/definition_builder.rb#864
  def validate_type_name(name, location); end

  # source://rbs//lib/rbs/definition_builder.rb#477
  def validate_type_params(definition, ancestors:, methods:); end

  # source://rbs//lib/rbs/definition_builder.rb#853
  def validate_type_presence(type); end
end

# source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#3
class RBS::DefinitionBuilder::AncestorBuilder
  # @return [AncestorBuilder] a new instance of AncestorBuilder
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#160
  sig { params(env: ::RBS::Environment).void }
  def initialize(env:); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#149
  sig { returns(::RBS::Environment) }
  def env; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#384
  def instance_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute instance_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#152
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::Definition::InstanceAncestors]) }
  def instance_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#502
  def interface_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute interface_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#158
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::Definition::InstanceAncestors]) }
  def interface_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#364
  def mixin_ancestors(entry, type_name, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#317
  def mixin_ancestors0(decl, type_name, align_params:, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#190
  def one_instance_ancestors(type_name); end

  # Returns the value of attribute one_instance_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#151
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::AncestorBuilder::OneAncestors]) }
  def one_instance_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#298
  def one_interface_ancestors(type_name); end

  # Returns the value of attribute one_interface_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#157
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::AncestorBuilder::OneAncestors]) }
  def one_interface_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#250
  def one_singleton_ancestors(type_name); end

  # Returns the value of attribute one_singleton_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#154
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::AncestorBuilder::OneAncestors]) }
  def one_singleton_ancestors_cache; end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#454
  def singleton_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  # Returns the value of attribute singleton_ancestors_cache.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#155
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::Definition::SingletonAncestors]) }
  def singleton_ancestors_cache; end

  # @raise [SuperclassMismatchError]
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#173
  def validate_super_class!(type_name, entry); end
end

# source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#4
class RBS::DefinitionBuilder::AncestorBuilder::OneAncestors
  # @return [OneAncestors] a new instance of OneAncestors
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#15
  sig do
    params(
      type_name: ::RBS::TypeName,
      params: T.nilable(::T::Array[::Symbol]),
      super_class: T.nilable(::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t),
      self_types: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance]),
      included_modules: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance]),
      included_interfaces: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance]),
      prepended_modules: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance]),
      extended_modules: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance]),
      extended_interfaces: T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])
    ).void
  end
  def initialize(type_name:, params:, super_class:, self_types:, included_modules:, included_interfaces:, prepended_modules:, extended_modules:, extended_interfaces:); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#27
  def each_ancestor(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#84
  def each_extended_interface(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#76
  def each_extended_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#60
  def each_included_interface(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#52
  def each_included_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#68
  def each_prepended_module(&block); end

  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#44
  def each_self_type(&block); end

  # Returns the value of attribute extended_interfaces.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#13
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def extended_interfaces; end

  # Returns the value of attribute extended_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#12
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def extended_modules; end

  # Returns the value of attribute included_interfaces.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#10
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def included_interfaces; end

  # Returns the value of attribute included_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#9
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def included_modules; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#6
  sig { returns(T.nilable(::T::Array[::Symbol])) }
  def params; end

  # Returns the value of attribute prepended_modules.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#11
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def prepended_modules; end

  # Returns the value of attribute self_types.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#8
  sig { returns(T.nilable(::T::Array[::RBS::Definition::Ancestor::Instance])) }
  def self_types; end

  # Returns the value of attribute super_class.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#7
  sig { returns(T.nilable(::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t)) }
  def super_class; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#5
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#92
    sig do
      params(
        type_name: ::RBS::TypeName,
        params: ::T::Array[::Symbol],
        super_class: T.nilable(::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t)
      ).returns(T.attached_class)
    end
    def class_instance(type_name:, params:, super_class:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#134
    sig { params(type_name: ::RBS::TypeName, params: ::T::Array[::Symbol]).returns(T.attached_class) }
    def interface(type_name:, params:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#120
    sig { params(type_name: ::RBS::TypeName, params: ::T::Array[::Symbol]).returns(T.attached_class) }
    def module_instance(type_name:, params:); end

    # source://rbs//lib/rbs/definition_builder/ancestor_builder.rb#106
    sig do
      params(
        type_name: ::RBS::TypeName,
        super_class: T.nilable(::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t)
      ).returns(T.attached_class)
    end
    def singleton(type_name:, super_class:); end
  end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#3
class RBS::DefinitionBuilder::MethodBuilder
  # @return [MethodBuilder] a new instance of MethodBuilder
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#89
  sig { params(env: ::RBS::Environment).void }
  def initialize(env:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#192
  def build_alias(methods, type, member:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#197
  def build_attribute(methods, type, member:, accessibility:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#97
  def build_instance(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#172
  def build_interface(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#213
  def build_method(methods, type, member:, accessibility:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#143
  def build_singleton(type_name); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#224
  def each_member_with_accessibility(members, accessibility: T.unsafe(nil)); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#84
  sig { returns(::RBS::Environment) }
  def env; end

  # Returns the value of attribute instance_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#85
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::MethodBuilder::Methods]) }
  def instance_methods; end

  # Returns the value of attribute interface_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#87
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::MethodBuilder::Methods]) }
  def interface_methods; end

  # Returns the value of attribute singleton_methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#86
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::DefinitionBuilder::MethodBuilder::Methods]) }
  def singleton_methods; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#237
  sig do
    params(
      env: ::RBS::Environment,
      except: T::Enumerable[::RBS::TypeName]
    ).returns(::RBS::DefinitionBuilder::MethodBuilder)
  end
  def update(env:, except:); end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#4
class RBS::DefinitionBuilder::MethodBuilder::Methods
  # @return [Methods] a new instance of Methods
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#28
  sig { params(type: ::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type).void }
  def initialize(type:); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#47
  def each; end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#26
  sig { returns(::T::Hash[::Symbol, ::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition]) }
  def methods; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#25
  sig { returns(::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type) }
  def type; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#33
  sig { returns(T.self_type) }
  def validate!; end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#5
class RBS::DefinitionBuilder::MethodBuilder::Methods::Definition < ::Struct
  sig do
    params(
      name: ::Symbol,
      type: ::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type,
      originals: ::T::Array[::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_original],
      overloads: ::T::Array[::RBS::AST::Members::MethodDefinition],
      accessibilities: ::T::Array[::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_accessibility]
    ).void
  end
  def initialize(name:, type:, originals:, overloads:, accessibilities:); end

  sig do
    returns(::T::Array[::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_accessibility])
  end
  def accessibilities; end

  def accessibilities=(_); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#12
  sig { returns(::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_accessibility) }
  def accessibility; end

  sig { returns(::Symbol) }
  def name; end

  def name=(_); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#8
  sig do
    returns(T.nilable(::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_original))
  end
  def original; end

  sig do
    returns(::T::Array[::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition::TypeAlias_original])
  end
  def originals; end

  def originals=(_); end

  sig { returns(::T::Array[::RBS::AST::Members::MethodDefinition]) }
  def overloads; end

  def overloads=(_); end

  sig { returns(::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type) }
  def type; end

  def type=(_); end

  class << self
    def [](*_arg0); end

    # source://rbs//lib/rbs/definition_builder/method_builder.rb#20
    sig do
      params(
        name: ::Symbol,
        type: ::TypeAliases::RBS::DefinitionBuilder::MethodBuilder::Methods::TypeAlias_instance_type
      ).returns(::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition)
    end
    def empty(name:, type:); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/definition_builder/method_builder.rb#61
class RBS::DefinitionBuilder::MethodBuilder::Methods::Sorter
  include ::TSort

  # @return [Sorter] a new instance of Sorter
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#66
  def initialize(methods); end

  # Returns the value of attribute methods.
  #
  # source://rbs//lib/rbs/definition_builder/method_builder.rb#64
  sig { returns(::T::Hash[::Symbol, ::RBS::DefinitionBuilder::MethodBuilder::Methods::Definition]) }
  def methods; end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#74
  def tsort_each_child(defn); end

  # source://rbs//lib/rbs/definition_builder/method_builder.rb#70
  def tsort_each_node(&block); end
end

# source://rbs//lib/rbs/errors.rb#19
# Error class for errors raised during building definitions.
#
class RBS::DefinitionError < ::RBS::BaseError; end

# source://rbs//lib/rbs/errors.rb#336
class RBS::DuplicatedDeclarationError < ::RBS::LoadingError
  # @return [DuplicatedDeclarationError] a new instance of DuplicatedDeclarationError
  #
  # source://rbs//lib/rbs/errors.rb#340
  def initialize(name, *decls); end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/errors.rb#338
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]) }
  def decls; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#337
  sig { returns(T.any(::RBS::TypeName, ::Symbol)) }
  def name; end
end

# source://rbs//lib/rbs/errors.rb#248
class RBS::DuplicatedInterfaceMethodDefinitionError < ::RBS::DefinitionError
  # @return [DuplicatedInterfaceMethodDefinitionError] a new instance of DuplicatedInterfaceMethodDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#253
  sig do
    params(
      type: ::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_ty,
      method_name: ::Symbol,
      member: ::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_mixin_member
    ).void
  end
  def initialize(type:, method_name:, member:); end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#251
  sig { returns(::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_mixin_member) }
  def member; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#250
  sig { returns(::Symbol) }
  def method_name; end

  # source://rbs//lib/rbs/errors.rb#261
  sig { returns(::String) }
  def qualified_method_name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#249
  sig { returns(::TypeAliases::RBS::DuplicatedInterfaceMethodDefinitionError::TypeAlias_ty) }
  def type; end

  # source://rbs//lib/rbs/errors.rb#270
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#209
class RBS::DuplicatedMethodDefinitionError < ::RBS::DefinitionError
  # @return [DuplicatedMethodDefinitionError] a new instance of DuplicatedMethodDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#214
  sig do
    params(
      type: ::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_ty,
      method_name: ::Symbol,
      members: ::T::Array[::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_original]
    ).void
  end
  def initialize(type:, method_name:, members:); end

  # source://rbs//lib/rbs/errors.rb#239
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/errors.rb#212
  sig { returns(::T::Array[::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_original]) }
  def members; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#211
  sig { returns(::Symbol) }
  def method_name; end

  # source://rbs//lib/rbs/errors.rb#243
  sig { returns(::T::Array[T.nilable(::RBS::Location[T.untyped, T.untyped])]) }
  def other_locations; end

  # source://rbs//lib/rbs/errors.rb#226
  sig { returns(::String) }
  def qualified_method_name; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#210
  sig { returns(::TypeAliases::RBS::DuplicatedMethodDefinitionError::TypeAlias_ty) }
  def type; end

  # source://rbs//lib/rbs/errors.rb#235
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/environment.rb#2
class RBS::Environment
  # @return [Environment] a new instance of Environment
  #
  # source://rbs//lib/rbs/environment.rb#124
  sig { void }
  def initialize; end

  # source://rbs//lib/rbs/environment.rb#219
  def <<(decl); end

  # source://rbs//lib/rbs/environment.rb#476
  def absolute_type(resolver, type, context:); end

  # source://rbs//lib/rbs/environment.rb#472
  def absolute_type_name(resolver, type_name, context:); end

  # Returns the value of attribute alias_decls.
  #
  # source://rbs//lib/rbs/environment.rb#7
  sig do
    returns(::T::Hash[::RBS::TypeName, ::RBS::Environment::SingleEntry[::RBS::TypeName, ::RBS::AST::Declarations::Alias]])
  end
  def alias_decls; end

  # source://rbs//lib/rbs/environment.rb#487
  sig { returns(::T::Array[::RBS::Buffer]) }
  def buffers; end

  # source://rbs//lib/rbs/environment.rb#491
  sig { returns(::T::Hash[::RBS::Buffer, ::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]]) }
  def buffers_decls; end

  # source://rbs//lib/rbs/environment.rb#152
  def cache_name(cache, name:, decl:, outer:); end

  # Returns the value of attribute class_decls.
  #
  # source://rbs//lib/rbs/environment.rb#5
  sig { returns(::T::Hash[::RBS::TypeName, T.any(::RBS::Environment::ClassEntry, ::RBS::Environment::ModuleEntry)]) }
  def class_decls; end

  # Returns the value of attribute constant_decls.
  #
  # source://rbs//lib/rbs/environment.rb#8
  sig do
    returns(::T::Hash[::RBS::TypeName, ::RBS::Environment::SingleEntry[::RBS::TypeName, ::RBS::AST::Declarations::Constant]])
  end
  def constant_decls; end

  # Returns the value of attribute declarations.
  #
  # source://rbs//lib/rbs/environment.rb#3
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]) }
  def declarations; end

  # source://rbs//lib/rbs/environment.rb#91
  def foo; end

  # Returns the value of attribute global_decls.
  #
  # source://rbs//lib/rbs/environment.rb#9
  sig { returns(::T::Hash[::Symbol, ::RBS::Environment::SingleEntry[::Symbol, ::RBS::AST::Declarations::Global]]) }
  def global_decls; end

  # source://rbs//lib/rbs/environment.rb#160
  def insert_decl(decl, outer:, namespace:); end

  # source://rbs//lib/rbs/environment.rb#482
  sig { returns(::String) }
  def inspect; end

  # Returns the value of attribute interface_decls.
  #
  # source://rbs//lib/rbs/environment.rb#6
  sig do
    returns(::T::Hash[::RBS::TypeName, ::RBS::Environment::SingleEntry[::RBS::TypeName, ::RBS::AST::Declarations::Interface]])
  end
  def interface_decls; end

  # source://rbs//lib/rbs/environment.rb#503
  def reject; end

  # source://rbs//lib/rbs/environment.rb#246
  def resolve_declaration(resolver, decl, outer:, prefix:); end

  # source://rbs//lib/rbs/environment.rb#360
  def resolve_member(resolver, member, context:); end

  # source://rbs//lib/rbs/environment.rb#458
  def resolve_method_type(resolver, type, context:); end

  # source://rbs//lib/rbs/environment.rb#231
  # Resolve all type names in the environment to absolute type names.
  # Relative type name will be left if absolute type name cannot be found.
  #
  # When `only` is given, it skips other _top-level_ declarations not included in the collection.
  # This helps running resolution faster in the case of _partial updates_.
  sig do
    params(
      only: T.nilable(::T::Set[::TypeAliases::RBS::AST::Declarations::TypeAlias_t])
    ).returns(::RBS::Environment)
  end
  def resolve_type_names(only: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment.rb#466
  def resolve_type_params(resolver, params, context:); end

  # source://rbs//lib/rbs/environment.rb#225
  # Runs generics type params validation over each class definitions.
  sig { void }
  def validate_type_params; end

  private

  # source://rbs//lib/rbs/environment.rb#135
  def initialize_copy(other); end

  class << self
    # source://rbs//lib/rbs/environment.rb#146
    def from_loader(loader); end
  end
end

# source://rbs//lib/rbs/environment.rb#97
class RBS::Environment::ClassEntry < ::RBS::Environment::MultiEntry
  # source://rbs//lib/rbs/environment.rb#98
  def primary; end

  M = type_member { { fixed: ::RBS::AST::Declarations::Class } }
end

# source://rbs//lib/rbs/environment.rb#11
module RBS::Environment::ContextUtil
  # source://rbs//lib/rbs/environment.rb#12
  def calculate_context(decls); end
end

# source://rbs//lib/rbs/environment.rb#76
class RBS::Environment::ModuleEntry < ::RBS::Environment::MultiEntry
  # source://rbs//lib/rbs/environment.rb#83
  def primary; end

  # source://rbs//lib/rbs/environment.rb#77
  sig { returns(::T::Array[::RBS::AST::Declarations::Module::Self]) }
  def self_types; end

  M = type_member { { fixed: ::RBS::AST::Declarations::Module } }
end

# source://rbs//lib/rbs/environment.rb#20
class RBS::Environment::MultiEntry
  # @return [MultiEntry] a new instance of MultiEntry
  #
  # source://rbs//lib/rbs/environment.rb#34
  sig { params(name: ::RBS::TypeName).void }
  def initialize(name:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment.rb#61
  def compatible_params?(ps1, ps2); end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/environment.rb#32
  sig { returns(::T::Array[::RBS::Environment::MultiEntry::D[M]]) }
  def decls; end

  # source://rbs//lib/rbs/environment.rb#39
  sig { params(decl: M, outer: ::T::Array[::TypeAliases::RBS::Environment::TypeAlias_module_decl]).void }
  def insert(decl:, outer:); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/environment.rb#31
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/environment.rb#71
  sig { returns(::RBS::Environment::MultiEntry::D[M]) }
  def primary; end

  # source://rbs//lib/rbs/environment.rb#67
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end

  # source://rbs//lib/rbs/environment.rb#44
  sig { void }
  def validate_type_params; end

  M = type_member
end

# source://rbs//lib/rbs/environment.rb#21
class RBS::Environment::MultiEntry::D < ::Struct
  include ::RBS::Environment::ContextUtil

  sig { params(decl: M, outer: ::T::Array[::TypeAliases::RBS::Environment::TypeAlias_module_decl]).void }
  def initialize(decl:, outer:); end

  # source://rbs//lib/rbs/environment.rb#26
  sig { returns(::T::Array[::RBS::Namespace]) }
  def context; end

  sig { returns(M) }
  def decl; end

  def decl=(_); end

  sig { returns(::T::Array[::TypeAliases::RBS::Environment::TypeAlias_module_decl]) }
  def outer; end

  def outer=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end

  M = type_member
end

# source://rbs//lib/rbs/environment.rb#106
class RBS::Environment::SingleEntry
  include ::RBS::Environment::ContextUtil

  # @return [SingleEntry] a new instance of SingleEntry
  #
  # source://rbs//lib/rbs/environment.rb#111
  sig { params(name: N, decl: D, outer: ::T::Array[::TypeAliases::RBS::Environment::TypeAlias_module_decl]).void }
  def initialize(name:, decl:, outer:); end

  # source://rbs//lib/rbs/environment.rb#119
  sig { returns(::T::Array[::RBS::Namespace]) }
  def context; end

  # Returns the value of attribute decl.
  #
  # source://rbs//lib/rbs/environment.rb#109
  sig { returns(D) }
  def decl; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/environment.rb#107
  sig { returns(N) }
  def name; end

  # Returns the value of attribute outer.
  #
  # source://rbs//lib/rbs/environment.rb#108
  sig { returns(::T::Array[::TypeAliases::RBS::Environment::TypeAlias_module_decl]) }
  def outer; end

  D = type_member
  N = type_member
end

# source://rbs//lib/rbs/environment_loader.rb#2
# EnvironmentLoader is an object to load RBS files from filesystem.
#
# Set up your configuration through repository and `#add` method.
#   # Set up the repository to load library RBSs from.
#   repo = RBS::Repository.default
#   repo.add(Pathname("vendor/rbs/gem-rbs"))
#   repo.add(Pathname("vendor/rbs/internal-rbs"))
#   loader = RBS::EnvironmentLoader.new(repository: repo)
#   # Add libraries to load RBS files.
#   loader.add(library: "minitest")
#   loader.add(library: "rbs", version: "1.0.0")
#   # Add dirs to load RBS files from.
#   loader.add(path: Pathname("sig"))
#   # Load RBSs into an environment.
#   environment = RBS::Environment.new()
#   loader.load(env: environment)
class RBS::EnvironmentLoader
  # @return [EnvironmentLoader] a new instance of EnvironmentLoader
  #
  # source://rbs//lib/rbs/environment_loader.rb#33
  # Accepts two optional keyword arguments.
  #
  # `core_root` is the path to the directory with RBSs for core classes.
  # The default value is the core library included in RBS gem. (EnvironmentLoader::DEFAULT_CORE_ROOT)
  # Passing `nil` means it skips loading core class definitions.
  # `repository` is the repository for library classes.
  # The default value is repository only with stdlib classes. (Repository.new)
  sig { params(core_root: T.nilable(::Pathname), repository: ::RBS::Repository).void }
  def initialize(core_root: T.unsafe(nil), repository: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment_loader.rb#41
  def add(path: T.unsafe(nil), library: T.unsafe(nil), version: T.unsafe(nil)); end

  # source://rbs//lib/rbs/environment_loader.rb#50
  def add_collection(collection_config); end

  # Returns the value of attribute core_root.
  #
  # source://rbs//lib/rbs/environment_loader.rb#15
  sig { returns(T.nilable(::Pathname)) }
  def core_root; end

  # Returns the value of attribute dirs.
  #
  # source://rbs//lib/rbs/environment_loader.rb#19
  sig { returns(::T::Array[::Pathname]) }
  def dirs; end

  # source://rbs//lib/rbs/environment_loader.rb#125
  def each_decl; end

  # source://rbs//lib/rbs/environment_loader.rb#80
  def each_dir; end

  # source://rbs//lib/rbs/environment_loader.rb#103
  def each_file(path, immediate:, skip_hidden:, &block); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment_loader.rb#60
  # This is helper function to test if RBS for a library is available or not.
  #
  sig { params(library: ::String, version: T.nilable(::String)).returns(T::Boolean) }
  def has_library?(library:, version:); end

  # Returns the value of attribute libs.
  #
  # source://rbs//lib/rbs/environment_loader.rb#18
  sig { returns(::T::Array[::RBS::EnvironmentLoader::Library]) }
  def libs; end

  # source://rbs//lib/rbs/environment_loader.rb#68
  # Add all declarations to environment.
  #
  # Raises `UnknownLibraryError` if RBS cannot be loaded from a library.
  # Returns an array of tuples of the declaration, path to the file, and the source.
  sig do
    params(
      env: ::RBS::Environment
    ).returns(::T::Array[[::TypeAliases::RBS::AST::Declarations::TypeAlias_t, ::Pathname, ::TypeAliases::RBS::EnvironmentLoader::TypeAlias_source]])
  end
  def load(env:); end

  # Returns the value of attribute repository.
  #
  # source://rbs//lib/rbs/environment_loader.rb#16
  sig { returns(::RBS::Repository) }
  def repository; end

  class << self
    # source://rbs//lib/rbs/environment_loader.rb#23
    def gem_sig_path(name, version); end
  end
end

# source://rbs//lib/rbs/environment_loader.rb#21
RBS::EnvironmentLoader::DEFAULT_CORE_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/environment_loader.rb#13
class RBS::EnvironmentLoader::Library < ::Struct
  sig { params(name: ::String, version: T.nilable(::String)).void }
  def initialize(name:, version:); end

  sig { returns(::String) }
  def name; end

  def name=(_); end

  sig { returns(T.nilable(::String)) }
  def version; end

  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end

  Elem = type_member { { fixed: T.nilable(::String) } }
end

# source://rbs//lib/rbs/environment_loader.rb#3
class RBS::EnvironmentLoader::UnknownLibraryError < ::StandardError
  # @return [UnknownLibraryError] a new instance of UnknownLibraryError
  #
  # source://rbs//lib/rbs/environment_loader.rb#6
  sig { params(lib: ::RBS::EnvironmentLoader::Library).void }
  def initialize(lib:); end

  # Returns the value of attribute library.
  #
  # source://rbs//lib/rbs/environment_loader.rb#4
  sig { returns(::RBS::EnvironmentLoader::Library) }
  def library; end
end

# source://rbs//lib/rbs/environment_walker.rb#2
# EnvironmentWalker provides topological sort of class/module definitions.
#
# If a method, attribute, or ancestor in a class definition have a reference to another class, it is dependency.
# ```rb
# walker = EnvironmentWalker.new(env: env)
# walker.each_strongly_connected_component do |scc|
#   # Yields an array of strongly connected components.
# end
# ```
# The `#only_ancestors!` method limits the dependency only to ancestors.
# Only super classes and included modules are dependencies with the option.
# This is useful to calculate the dependencies of class hierarchy.
# walker = EnvironmentWalker.new(env: env).only_ancestors!
class RBS::EnvironmentWalker
  include ::TSort

  # @return [EnvironmentWalker] a new instance of EnvironmentWalker
  #
  # source://rbs//lib/rbs/environment_walker.rb#9
  sig { params(env: ::RBS::Environment).void }
  def initialize(env:); end

  # source://rbs//lib/rbs/environment_walker.rb#14
  sig { returns(::RBS::DefinitionBuilder) }
  def builder; end

  # source://rbs//lib/rbs/environment_walker.rb#97
  def each_type_name(type, &block); end

  # source://rbs//lib/rbs/environment_walker.rb#103
  def each_type_node(type, &block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/environment_walker.rb#7
  sig { returns(::RBS::Environment) }
  def env; end

  sig { returns(T::Boolean) }
  def only_ancestors; end

  # source://rbs//lib/rbs/environment_walker.rb#18
  sig { params(only: T::Boolean).returns(T.self_type) }
  def only_ancestors!(only = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/environment_walker.rb#23
  sig { returns(T::Boolean) }
  def only_ancestors?; end

  # source://rbs//lib/rbs/environment_walker.rb#42
  def tsort_each_child(node, &block); end

  # source://rbs//lib/rbs/environment_walker.rb#29
  def tsort_each_node(&block); end
end

# source://rbs//lib/rbs/environment_walker.rb#3
class RBS::EnvironmentWalker::InstanceNode < ::Struct
  sig { params(type_name: ::RBS::TypeName).void }
  def initialize(type_name:); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment_walker.rb#4
class RBS::EnvironmentWalker::SingletonNode < ::Struct
  sig { params(type_name: ::RBS::TypeName).void }
  def initialize(type_name:); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/environment_walker.rb#5
class RBS::EnvironmentWalker::TypeNameNode < ::Struct
  sig { params(type_name: ::RBS::TypeName).void }
  def initialize(type_name:); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/factory.rb#2
class RBS::Factory
  # source://rbs//lib/rbs/factory.rb#3
  def type_name(string); end
end

# source://rbs//lib/rbs/errors.rb#325
class RBS::GenericParameterMismatchError < ::RBS::LoadingError
  # @return [GenericParameterMismatchError] a new instance of GenericParameterMismatchError
  #
  # source://rbs//lib/rbs/errors.rb#329
  sig do
    params(
      name: ::RBS::TypeName,
      decl: T.any(::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Module)
    ).void
  end
  def initialize(name:, decl:); end

  # Returns the value of attribute decl.
  #
  # source://rbs//lib/rbs/errors.rb#327
  sig { returns(T.any(::RBS::AST::Declarations::Class, ::RBS::AST::Declarations::Module)) }
  def decl; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#326
  sig { returns(::RBS::TypeName) }
  def name; end
end

# source://rbs//lib/rbs/errors.rb#302
class RBS::InvalidOverloadMethodError < ::RBS::DefinitionError
  # @return [InvalidOverloadMethodError] a new instance of InvalidOverloadMethodError
  #
  # source://rbs//lib/rbs/errors.rb#308
  sig do
    params(
      type_name: ::RBS::TypeName,
      method_name: ::Symbol,
      kind: T.untyped,
      members: ::T::Array[::RBS::AST::Members::MethodDefinition]
    ).void
  end
  def initialize(type_name:, method_name:, kind:, members:); end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/errors.rb#305
  sig { returns(T.untyped) }
  def kind; end

  # Returns the value of attribute members.
  #
  # source://rbs//lib/rbs/errors.rb#306
  sig { returns(::T::Array[::RBS::AST::Members::MethodDefinition]) }
  def members; end

  # Returns the value of attribute method_name.
  #
  # source://rbs//lib/rbs/errors.rb#304
  sig { returns(::Symbol) }
  def method_name; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#303
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#49
class RBS::InvalidTypeApplicationError < ::RBS::DefinitionError
  # @return [InvalidTypeApplicationError] a new instance of InvalidTypeApplicationError
  #
  # source://rbs//lib/rbs/errors.rb#55
  sig do
    params(
      type_name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      params: ::T::Array[::Symbol],
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(type_name:, args:, params:, location:); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/errors.rb#51
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#53
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute params.
  #
  # source://rbs//lib/rbs/errors.rb#52
  sig { returns(::T::Array[::Symbol]) }
  def params; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#50
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#63
    sig do
      params(
        type_name: ::RBS::TypeName,
        args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
        params: ::T::Array[::Symbol],
        location: T.nilable(::RBS::Location[T.untyped, T.untyped])
      ).void
    end
    def check!(type_name:, args:, params:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#349
class RBS::InvalidVarianceAnnotationError < ::RBS::DefinitionError
  # @return [InvalidVarianceAnnotationError] a new instance of InvalidVarianceAnnotationError
  #
  # source://rbs//lib/rbs/errors.rb#354
  sig do
    params(
      type_name: ::RBS::TypeName,
      param: ::RBS::AST::TypeParam,
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(type_name:, param:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#352
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute param.
  #
  # source://rbs//lib/rbs/errors.rb#351
  sig { returns(::RBS::AST::TypeParam) }
  def param; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#350
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/errors.rb#18
# Error class for errors raised during loading environments.
#
class RBS::LoadingError < ::RBS::BaseError; end

# source://rbs//lib/rbs/location_aux.rb#2
# Location is the range on buffer, `start_pos..end_pos`.
# The index is based on characters.
#
# A location can have _child_ locations.
# ```
class RBS::Location
  include ::Interfaces::Interface_ToJson

  alias aref []

  def initialize(_arg0, _arg1, _arg2); end

  # source://rbs//lib/rbs/location_aux.rb#68
  def ==(other); end

  def [](_arg0); end
  def _add_optional_child(_arg0, _arg1, _arg2); end
  def _add_optional_no_child(_arg0); end
  def _add_required_child(_arg0, _arg1, _arg2); end

  sig { returns(::T::Array[::Symbol]) }
  def _optional_keys; end

  sig { returns(::T::Array[::Symbol]) }
  def _required_keys; end

  # source://rbs//lib/rbs/location_aux.rb#99
  def add_optional_child(name, range); end

  # source://rbs//lib/rbs/location_aux.rb#95
  def add_required_child(name, range); end

  def aref(_arg0); end

  sig { returns(::RBS::Buffer) }
  def buffer; end

  # source://rbs//lib/rbs/location_aux.rb#107
  def each_optional_key(&block); end

  # source://rbs//lib/rbs/location_aux.rb#115
  def each_required_key(&block); end

  # source://rbs//lib/rbs/location_aux.rb#40
  sig { returns(::Integer) }
  def end_column; end

  # source://rbs//lib/rbs/location_aux.rb#36
  sig { returns(::Integer) }
  def end_line; end

  # source://rbs//lib/rbs/location_aux.rb#50
  sig { returns(::TypeAliases::RBS::Buffer::TypeAlias_loc) }
  def end_loc; end

  sig { returns(::Integer) }
  def end_pos; end

  # source://rbs//lib/rbs/location_aux.rb#3
  sig { returns(::String) }
  def inspect; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#123
  def key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#24
  # Returns the name of the buffer.
  sig { returns(T.untyped) }
  def name; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#127
  def optional_key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#56
  sig { returns(::T::Range[::Integer]) }
  def range; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/location_aux.rb#131
  def required_key?(name); end

  # source://rbs//lib/rbs/location_aux.rb#60
  # A substring of buffer associated to the location.
  sig { returns(::String) }
  def source; end

  # source://rbs//lib/rbs/location_aux.rb#32
  sig { returns(::Integer) }
  def start_column; end

  # source://rbs//lib/rbs/location_aux.rb#28
  sig { returns(::Integer) }
  def start_line; end

  # source://rbs//lib/rbs/location_aux.rb#44
  sig { returns(::TypeAliases::RBS::Buffer::TypeAlias_loc) }
  def start_loc; end

  sig { returns(::Integer) }
  def start_pos; end

  # source://rbs//lib/rbs/location_aux.rb#75
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/location_aux.rb#64
  sig { returns(::String) }
  def to_s; end

  private

  sig { returns(T.nilable(::TypeAliases::RBS::Buffer::TypeAlias_loc)) }
  def _end_loc; end

  sig { returns(T.nilable(::TypeAliases::RBS::Buffer::TypeAlias_loc)) }
  def _start_loc; end

  def initialize_copy(_arg0); end

  class << self
    # source://rbs//lib/rbs/location_aux.rb#9
    def new(buffer_ = T.unsafe(nil), start_pos_ = T.unsafe(nil), end_pos_ = T.unsafe(nil), buffer: T.unsafe(nil), start_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

    # source://rbs//lib/rbs/location_aux.rb#91
    def to_string(location, default: T.unsafe(nil)); end
  end

  OptionalChildKeys = type_member
  RequiredChildKeys = type_member
end

# source://rbs//lib/rbs/location_aux.rb#22
RBS::Location::WithChildren = RBS::Location

# source://rbs//lib/rbs/locator.rb#2
# Locator helps finding RBS elements based on locations in the RBS source text.
#
class RBS::Locator
  # @return [Locator] a new instance of Locator
  #
  # source://rbs//lib/rbs/locator.rb#5
  sig { params(decls: ::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]).void }
  def initialize(decls:); end

  # source://rbs//lib/rbs/locator.rb#9
  sig { returns(::RBS::Buffer) }
  def buffer; end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/locator.rb#3
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]) }
  def decls; end

  # source://rbs//lib/rbs/locator.rb#13
  # Returns list of components.
  # Inner component comes first.
  #
  sig do
    params(
      line: ::Integer,
      column: ::Integer
    ).returns(::T::Array[::TypeAliases::RBS::Locator::TypeAlias_component])
  end
  def find(line:, column:); end

  # source://rbs//lib/rbs/locator.rb#24
  # Returns pair of the inner most symbol and outer components.
  # It ensures the array starts with a AST/type component.
  #
  sig do
    params(
      line: ::Integer,
      column: ::Integer
    ).returns(T.nilable([T.nilable(::Symbol), ::T::Array[::TypeAliases::RBS::Locator::TypeAlias_component]]))
  end
  def find2(line:, column:); end

  # source://rbs//lib/rbs/locator.rb#37
  def find_in_decl(pos, decl:, array:); end

  # source://rbs//lib/rbs/locator.rb#182
  def find_in_loc(pos, location:, array:); end

  # source://rbs//lib/rbs/locator.rb#108
  def find_in_member(pos, member:, array:); end

  # source://rbs//lib/rbs/locator.rb#131
  def find_in_method_type(pos, method_type:, array:); end

  # source://rbs//lib/rbs/locator.rb#166
  def find_in_type(pos, type:, array:); end

  # source://rbs//lib/rbs/locator.rb#149
  def find_in_type_param(pos, type_param:, array:); end

  # source://rbs//lib/rbs/locator.rb#209
  def test_loc(pos, location:); end
end

# source://rbs//lib/rbs/errors.rb#2
module RBS::MethodNameHelper
  # source://rbs//lib/rbs/errors.rb#3
  sig { returns(::String) }
  def method_name_string; end
end

# source://rbs//lib/rbs/method_type.rb#2
class RBS::MethodType
  include ::Interfaces::Interface_ToJson

  # @return [MethodType] a new instance of MethodType
  #
  # source://rbs//lib/rbs/method_type.rb#8
  sig do
    params(
      type_params: ::T::Array[::RBS::AST::TypeParam],
      type: ::RBS::Types::Function,
      block: T.nilable(::RBS::Types::Block),
      location: T.nilable(::TypeAliases::RBS::MethodType::TypeAlias_loc)
    ).void
  end
  def initialize(type_params:, type:, block:, location:); end

  # source://rbs//lib/rbs/method_type.rb#15
  def ==(other); end

  # Returns the value of attribute block.
  #
  # source://rbs//lib/rbs/method_type.rb#5
  sig { returns(T.nilable(::RBS::Types::Block)) }
  def block; end

  # source://rbs//lib/rbs/method_type.rb#84
  def each_type(&block); end

  # source://rbs//lib/rbs/method_type.rb#55
  sig { params(set: ::T::Set[::Symbol]).returns(::T::Set[::Symbol]) }
  def free_variables(set = T.unsafe(nil)); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/method_type.rb#6
  sig { returns(T.nilable(::TypeAliases::RBS::MethodType::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/method_type.rb#61
  def map_type(&block); end

  # source://rbs//lib/rbs/method_type.rb#72
  def map_type_bound(&block); end

  # source://rbs//lib/rbs/method_type.rb#31
  def sub(s); end

  # source://rbs//lib/rbs/method_type.rb#22
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/method_type.rb#95
  sig { returns(::String) }
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/method_type.rb#4
  sig { returns(::RBS::Types::Function) }
  def type; end

  # source://rbs//lib/rbs/method_type.rb#112
  sig { returns(::T::Array[::Symbol]) }
  def type_param_names; end

  # Returns the value of attribute type_params.
  #
  # source://rbs//lib/rbs/method_type.rb#3
  sig { returns(::T::Array[::RBS::AST::TypeParam]) }
  def type_params; end

  # source://rbs//lib/rbs/method_type.rb#46
  sig do
    params(
      type_params: ::T::Array[::RBS::AST::TypeParam],
      type: ::RBS::Types::Function,
      block: T.nilable(::RBS::Types::Block),
      location: T.nilable(::TypeAliases::RBS::MethodType::TypeAlias_loc)
    ).returns(::RBS::MethodType)
  end
  def update(type_params: T.unsafe(nil), type: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/errors.rb#381
class RBS::MixinClassError < ::RBS::DefinitionError
  # @return [MixinClassError] a new instance of MixinClassError
  #
  # source://rbs//lib/rbs/errors.rb#385
  sig { params(type_name: ::RBS::TypeName, member: ::TypeAliases::RBS::MixinClassError::TypeAlias_member).void }
  def initialize(type_name:, member:); end

  # source://rbs//lib/rbs/errors.rb#392
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#383
  sig { returns(::TypeAliases::RBS::MixinClassError::TypeAlias_member) }
  def member; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#382
  sig { returns(::RBS::TypeName) }
  def type_name; end

  private

  # source://rbs//lib/rbs/errors.rb#405
  sig { returns(::String) }
  def mixin_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#396
    sig do
      params(
        type_name: ::RBS::TypeName,
        env: ::RBS::Environment,
        member: ::TypeAliases::RBS::MixinClassError::TypeAlias_member
      ).void
    end
    def check!(type_name:, env:, member:); end
  end
end

# source://rbs//lib/rbs/namespace.rb#2
# Namespace instance represents a _prefix of module names_.
#
#    vvvvvvvvvvvvvv  TypeName
#    RBS::Namespace
#    ^^^^^           Namespace
#    vvvvvvvvvv    TypeName
#    RBS::Types
#    ^^^^^         Namespace
#    vvvvvvvvvvvvvvvvv    TypeName
#    RBS::Types::Union
#    ^^^^^^^^^^^^         Namespace
# Note that `Namespace` is an RBS specific concept and there is no corresponding concept in Ruby.
# There are _absolute_ and _relative_ namespaces.
#    Namespace(::RBS::)         # Absolute namespace
#    Namespace(  RBS::)         # Relative namespace
# It also defines two special namespaces.
#    ::              # _Root_ namespace
#                    # _Empty_ namespace
class RBS::Namespace
  alias eql? ==

  # @return [Namespace] a new instance of Namespace
  #
  # source://rbs//lib/rbs/namespace.rb#5
  sig { params(path: ::T::Array[::Symbol], absolute: ::TypeAliases::TypeAlias_boolish).void }
  def initialize(path:, absolute:); end

  # source://rbs//lib/rbs/namespace.rb#18
  def +(other); end

  # source://rbs//lib/rbs/namespace.rb#55
  def ==(other); end

  # source://rbs//lib/rbs/namespace.rb#43
  # Returns absolute namespace.
  #
  #    Namespace("A").absolute!      # => Namespace("::A")
  #    Namespace("::A").absolute!    # => Namespace("::A")
  sig { returns(::RBS::Namespace) }
  def absolute!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#35
  # Returns true if self is absolute namespace.
  sig { returns(T::Boolean) }
  def absolute?; end

  # source://rbs//lib/rbs/namespace.rb#26
  def append(component); end

  # source://rbs//lib/rbs/namespace.rb#97
  def ascend; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#51
  sig { returns(T::Boolean) }
  def empty?; end

  # source://rbs//lib/rbs/namespace.rb#55
  def eql?(other); end

  # source://rbs//lib/rbs/namespace.rb#61
  # Hash is defined based on its structure.
  #
  sig { returns(::Integer) }
  def hash; end

  # source://rbs//lib/rbs/namespace.rb#30
  # Returns parent namespace.
  # Raises error there is no parent namespace.
  #
  #    Namespace("::A").parent    # => Namespace("::")
  #    Namespace("::").parent     # raises error
  #    Namespace("A::B").parent   # => Namespace("A")
  sig { returns(::RBS::Namespace) }
  def parent; end

  # Returns the value of attribute path.
  #
  # source://rbs//lib/rbs/namespace.rb#3
  sig { returns(::T::Array[::Symbol]) }
  def path; end

  # source://rbs//lib/rbs/namespace.rb#47
  # Returns _relative_ namespace.
  #
  sig { returns(::RBS::Namespace) }
  def relative!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/namespace.rb#39
  # Returns true if self is relative namespace.
  sig { returns(T::Boolean) }
  def relative?; end

  # source://rbs//lib/rbs/namespace.rb#65
  # Returns a pair of parent namespace and a symbol of last component.
  #
  #    Namespace("::A::B::C").split    # => [Namespace("::A::B::"), :C]
  sig { returns(T.nilable([::RBS::Namespace, ::Symbol])) }
  def split; end

  # source://rbs//lib/rbs/namespace.rb#71
  sig { returns(::String) }
  def to_s; end

  # source://rbs//lib/rbs/namespace.rb#80
  # Construct a type name which points to the same name type.
  #
  sig { returns(::RBS::TypeName) }
  def to_type_name; end

  class << self
    # source://rbs//lib/rbs/namespace.rb#10
    # Returns new _empty_ namespace.
    sig { returns(::RBS::Namespace) }
    def empty; end

    # source://rbs//lib/rbs/namespace.rb#89
    def parse(string); end

    # source://rbs//lib/rbs/namespace.rb#14
    # Returns new _root_ namespace.
    sig { returns(::RBS::Namespace) }
    def root; end
  end
end

# source://rbs//lib/rbs/errors.rb#180
class RBS::NoMixinFoundError < ::RBS::DefinitionError
  # @return [NoMixinFoundError] a new instance of NoMixinFoundError
  #
  # source://rbs//lib/rbs/errors.rb#184
  sig { params(type_name: ::RBS::TypeName, member: ::TypeAliases::RBS::AST::Members::TypeAlias_t).void }
  def initialize(type_name:, member:); end

  # source://rbs//lib/rbs/errors.rb#191
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute member.
  #
  # source://rbs//lib/rbs/errors.rb#182
  sig { returns(::TypeAliases::RBS::AST::Members::TypeAlias_t) }
  def member; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#181
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#195
    def check!(type_name, env:, member:); end
  end
end

# source://rbs//lib/rbs/errors.rb#153
class RBS::NoSelfTypeFoundError < ::RBS::DefinitionError
  # @return [NoSelfTypeFoundError] a new instance of NoSelfTypeFoundError
  #
  # source://rbs//lib/rbs/errors.rb#157
  sig { params(type_name: ::RBS::TypeName, location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#155
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#154
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#164
    def check!(self_type, env:); end
  end
end

# source://rbs//lib/rbs/errors.rb#137
class RBS::NoSuperclassFoundError < ::RBS::DefinitionError
  # @return [NoSuperclassFoundError] a new instance of NoSuperclassFoundError
  #
  # source://rbs//lib/rbs/errors.rb#141
  sig { params(type_name: ::RBS::TypeName, location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#139
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#138
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#148
    def check!(type_name, env:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#108
class RBS::NoTypeFoundError < ::RBS::BaseError
  # @return [NoTypeFoundError] a new instance of NoTypeFoundError
  #
  # source://rbs//lib/rbs/errors.rb#112
  sig { params(type_name: ::RBS::TypeName, location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(type_name:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#110
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#109
  sig { returns(::RBS::TypeName) }
  def type_name; end

  class << self
    # source://rbs//lib/rbs/errors.rb#119
    def check!(type_name, env:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#435
class RBS::NonregularTypeAliasError < ::RBS::BaseError
  # @return [NonregularTypeAliasError] a new instance of NonregularTypeAliasError
  #
  # source://rbs//lib/rbs/errors.rb#439
  sig do
    params(
      diagnostic: ::RBS::TypeAliasRegularity::Diagnostic,
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(diagnostic:, location:); end

  # Returns the value of attribute diagnostic.
  #
  # source://rbs//lib/rbs/errors.rb#436
  sig { returns(::RBS::TypeAliasRegularity::Diagnostic) }
  def diagnostic; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#437
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end
end

# source://rbs//lib/rbs/parser_aux.rb#2
class RBS::Parser
  class << self
    def _parse_method_type(_arg0, _arg1, _arg2, _arg3); end
    def _parse_signature(_arg0, _arg1, _arg2); end
    def _parse_type(_arg0, _arg1, _arg2, _arg3); end

    # source://rbs//lib/rbs/parser_aux.rb#15
    def buffer(source); end

    # source://rbs//lib/rbs/parser_aux.rb#7
    def parse_method_type(source, line: T.unsafe(nil), column: T.unsafe(nil), variables: T.unsafe(nil)); end

    # source://rbs//lib/rbs/parser_aux.rb#11
    def parse_signature(source, line: T.unsafe(nil), column: T.unsafe(nil)); end

    # source://rbs//lib/rbs/parser_aux.rb#3
    def parse_type(source, line: T.unsafe(nil), column: T.unsafe(nil), variables: T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/parser_aux.rb#29
RBS::Parser::KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://rbs//lib/rbs/parser_compat/lexer_error.rb#4
RBS::Parser::LexerError = RBS::ParsingError

# source://rbs//lib/rbs/parser_compat/located_value.rb#4
class RBS::Parser::LocatedValue; end

# source://rbs//lib/rbs/parser_compat/semantics_error.rb#4
RBS::Parser::SemanticsError = RBS::ParsingError

# source://rbs//lib/rbs/parser_compat/syntax_error.rb#4
RBS::Parser::SyntaxError = RBS::ParsingError

# source://rbs//lib/rbs/errors.rb#21
# Error class for errors raised during parsing.
#
class RBS::ParsingError < ::RBS::BaseError
  # @return [ParsingError] a new instance of ParsingError
  #
  # source://rbs//lib/rbs/errors.rb#26
  def initialize(location, error_message, token_type); end

  # Returns the value of attribute error_message.
  #
  # source://rbs//lib/rbs/errors.rb#23
  sig { returns(::String) }
  def error_message; end

  # source://rbs//lib/rbs/errors.rb#34
  sig { returns(::String) }
  def error_value; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#22
  sig { returns(::RBS::Location[T.untyped, T.untyped]) }
  def location; end

  # source://rbs//lib/rbs/errors.rb#41
  sig { returns(::String) }
  def token_str; end

  # Returns the value of attribute token_type.
  #
  # source://rbs//lib/rbs/errors.rb#24
  sig { returns(::String) }
  def token_type; end
end

# source://rbs//lib/rbs/prototype/helpers.rb#2
module RBS::Prototype; end

# source://rbs//lib/rbs/prototype/helpers.rb#3
module RBS::Prototype::Helpers
  private

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#76
  def any_node?(node, nodes: T.unsafe(nil), &block); end

  # NOTE: args_node may be a nil by a bug
  #       https://bugs.ruby-lang.org/issues/17495
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#100
  def args_from_node(args_node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#6
  def block_from_body(node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#64
  def each_child(node, &block); end

  # source://rbs//lib/rbs/prototype/helpers.rb#68
  def each_node(nodes); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/helpers.rb#88
  def keyword_hash?(node); end

  # source://rbs//lib/rbs/prototype/helpers.rb#104
  sig { returns(::RBS::Types::Bases::Any) }
  def untyped; end
end

# source://rbs//lib/rbs/prototype/rb.rb#3
class RBS::Prototype::RB
  include ::RBS::Prototype::Helpers

  alias node_type param_type

  # @return [RB] a new instance of RB
  #
  # source://rbs//lib/rbs/prototype/rb.rb#35
  sig { void }
  def initialize; end

  # source://rbs//lib/rbs/prototype/rb.rb#507
  def block_type(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#487
  def body_type(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#406
  def const_to_name(node, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#387
  def const_to_name!(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#685
  def current_accessibility(decls, index = T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#39
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]) }
  def decls; end

  # source://rbs//lib/rbs/prototype/rb.rb#725
  def find_def_index_by_name(decls, name); end

  # source://rbs//lib/rbs/prototype/rb.rb#482
  def function_return_type_from_body(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#426
  def function_type_from_body(node, def_name); end

  # source://rbs//lib/rbs/prototype/rb.rb#500
  def if_unless_type(node); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rb.rb#721
  def is_accessibility?(decl); end

  # source://rbs//lib/rbs/prototype/rb.rb#417
  def literal_to_symbol(node); end

  # source://rbs//lib/rbs/prototype/rb.rb#521
  def literal_to_type(node); end

  # backward compatible
  #
  # source://rbs//lib/rbs/prototype/rb.rb#642
  def node_type(node, default: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#642
  def param_type(node, default: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rb.rb#65
  def parse(string); end

  # source://rbs//lib/rbs/prototype/rb.rb#677
  sig { returns(::RBS::AST::Members::Private) }
  def private; end

  # source://rbs//lib/rbs/prototype/rb.rb#98
  def process(node, decls:, comments:, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#381
  def process_children(node, decls:, comments:, context:); end

  # source://rbs//lib/rbs/prototype/rb.rb#681
  sig { returns(::RBS::AST::Members::Public) }
  def public; end

  # source://rbs//lib/rbs/prototype/rb.rb#622
  def range_element_type(types); end

  # source://rbs//lib/rbs/prototype/rb.rb#695
  def remove_unnecessary_accessibility_methods!(decls); end

  # Returns the value of attribute source_decls.
  #
  # source://rbs//lib/rbs/prototype/rb.rb#32
  sig { returns(::T::Array[::TypeAliases::RBS::Prototype::RB::TypeAlias_decl]) }
  def source_decls; end

  # Returns the value of attribute toplevel_members.
  #
  # source://rbs//lib/rbs/prototype/rb.rb#33
  def toplevel_members; end

  # source://rbs//lib/rbs/prototype/rb.rb#611
  def types_to_union_type(types); end
end

# source://rbs//lib/rbs/prototype/rb.rb#6
class RBS::Prototype::RB::Context < ::Struct
  sig { params(module_function: T::Boolean, singleton: T::Boolean, namespace: ::RBS::Namespace).void }
  def initialize(module_function:, singleton:, namespace:); end

  # source://rbs//lib/rbs/prototype/rb.rb#23
  sig { returns(T.untyped) }
  def attribute_kind; end

  # source://rbs//lib/rbs/prototype/rb.rb#13
  sig { returns(::TypeAliases::RBS::Prototype::RB::Context::TypeAlias_method_kind) }
  def method_kind; end

  sig { returns(T::Boolean) }
  def module_function; end

  def module_function=(_); end

  sig { returns(::RBS::Namespace) }
  def namespace; end

  def namespace=(_); end

  sig { returns(T::Boolean) }
  def singleton; end

  def singleton=(_); end

  class << self
    def [](*_arg0); end

    # source://rbs//lib/rbs/prototype/rb.rb#9
    sig { params(namespace: ::RBS::Namespace).returns(::RBS::Prototype::RB::Context) }
    def initial(namespace: T.unsafe(nil)); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/prototype/rbi.rb#3
class RBS::Prototype::RBI
  # @return [RBI] a new instance of RBI
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#8
  sig { void }
  def initialize; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#539
  def call_node?(node, name:, receiver: T.unsafe(nil), args: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rbi.rb#543
  def const_to_name(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#88
  # The inner most module/class definition, returns `nil` on toplevel
  sig { returns(T.nilable(::TypeAliases::RBS::Prototype::RBI::TypeAlias_module_decl)) }
  def current_module; end

  # source://rbs//lib/rbs/prototype/rbi.rb#92
  # The inner most module/class definition, raises on toplevel
  sig { returns(::TypeAliases::RBS::Prototype::RBI::TypeAlias_module_decl) }
  def current_module!; end

  # source://rbs//lib/rbs/prototype/rbi.rb#44
  sig { returns(::RBS::Namespace) }
  def current_namespace; end

  # Returns the value of attribute decls.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#4
  sig { returns(::T::Array[::TypeAliases::RBS::AST::Declarations::TypeAlias_t]) }
  def decls; end

  # source://rbs//lib/rbs/prototype/rbi.rb#583
  def each_arg(array, &block); end

  # source://rbs//lib/rbs/prototype/rbi.rb#597
  def each_child(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#110
  def join_comments(nodes, comments); end

  # Returns the value of attribute last_sig.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#6
  sig { returns(T.nilable(::T::Array[::RubyVM::AbstractSyntaxTree::Node])) }
  def last_sig; end

  # source://rbs//lib/rbs/prototype/rbi.rb#274
  def method_type(args_node, type_node, variables:, overloads:); end

  # Returns the value of attribute modules.
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#5
  sig { returns(::T::Array[::TypeAliases::RBS::Prototype::RBI::TypeAlias_module_decl]) }
  def modules; end

  # source://rbs//lib/rbs/prototype/rbi.rb#40
  def nested_name(name); end

  # source://rbs//lib/rbs/prototype/rbi.rb#605
  def node_to_hash(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#14
  def parse(string); end

  # source://rbs//lib/rbs/prototype/rbi.rb#336
  def parse_params(args_node, args, method_type, variables:, overloads:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#104
  # Clear the `sig` call list
  sig { returns(T.nilable(::T::Array[::RubyVM::AbstractSyntaxTree::Node])) }
  def pop_sig; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/rbi.rb#531
  def proc_type?(type_node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#115
  def process(node, comments:, outer: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/rbi.rb#50
  def push_class(name, super_class, comment:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#69
  def push_module(name, comment:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#96
  def push_sig(node); end

  # source://rbs//lib/rbs/prototype/rbi.rb#454
  def type_of(type_node, variables:); end

  # source://rbs//lib/rbs/prototype/rbi.rb#467
  def type_of0(type_node, variables:); end
end

# source://rbs//lib/rbs/prototype/runtime.rb#3
class RBS::Prototype::Runtime
  include ::RBS::Prototype::Helpers

  # @return [Runtime] a new instance of Runtime
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#11
  def initialize(patterns:, env:, merge:, owners_included: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#531
  def block_from_ast_of(method); end

  # source://rbs//lib/rbs/prototype/runtime.rb#34
  def builder; end

  # source://rbs//lib/rbs/prototype/runtime.rb#518
  def const_name(const); end

  # source://rbs//lib/rbs/prototype/runtime.rb#42
  def decls; end

  # source://rbs//lib/rbs/prototype/runtime.rb#73
  def each_included_module(type_name, mod); end

  # Generate/find outer module declarations
  # This is broken down into another method to comply with `DRY`
  # This generates/finds declarations in nested form & returns the last array of declarations
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#469
  def ensure_outer_module_declarations(mod); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#7
  def env; end

  # source://rbs//lib/rbs/prototype/runtime.rb#365
  def generate_class(mod); end

  # source://rbs//lib/rbs/prototype/runtime.rb#319
  def generate_constants(mod, decls); end

  # source://rbs//lib/rbs/prototype/runtime.rb#220
  def generate_methods(mod, module_name, members); end

  # source://rbs//lib/rbs/prototype/runtime.rb#412
  def generate_module(mod); end

  # source://rbs//lib/rbs/prototype/runtime.rb#352
  def generate_super_class(mod); end

  # Returns the value of attribute merge.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#8
  def merge; end

  # source://rbs//lib/rbs/prototype/runtime.rb#169
  def merge_rbs(module_name, members, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#103
  def method_type(method); end

  # Returns the exact name & not compactly declared name
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#513
  def only_name(mod); end

  # Returns the value of attribute owners_included.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#9
  def owners_included; end

  # source://rbs//lib/rbs/prototype/runtime.rb#38
  def parse(file); end

  # Returns the value of attribute patterns.
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#6
  def patterns; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#22
  def target?(const); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/prototype/runtime.rb#209
  def target_method?(mod, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#59
  def to_type_name(name, full_name: T.unsafe(nil)); end

  # source://rbs//lib/rbs/prototype/runtime.rb#523
  def type_args(type_name); end
end

# source://rbs//lib/rbs/errors.rb#363
class RBS::RecursiveAliasDefinitionError < ::RBS::DefinitionError
  # @return [RecursiveAliasDefinitionError] a new instance of RecursiveAliasDefinitionError
  #
  # source://rbs//lib/rbs/errors.rb#367
  sig do
    params(
      type: ::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_ty,
      defs: ::T::Array[::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_defn]
    ).void
  end
  def initialize(type:, defs:); end

  # Returns the value of attribute defs.
  #
  # source://rbs//lib/rbs/errors.rb#365
  sig { returns(::T::Array[::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_defn]) }
  def defs; end

  # source://rbs//lib/rbs/errors.rb#374
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/errors.rb#364
  sig { returns(::TypeAliases::RBS::RecursiveAliasDefinitionError::TypeAlias_ty) }
  def type; end
end

# source://rbs//lib/rbs/errors.rb#70
class RBS::RecursiveAncestorError < ::RBS::DefinitionError
  # @return [RecursiveAncestorError] a new instance of RecursiveAncestorError
  #
  # source://rbs//lib/rbs/errors.rb#74
  sig do
    params(
      ancestors: ::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t],
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(ancestors:, location:); end

  # Returns the value of attribute ancestors.
  #
  # source://rbs//lib/rbs/errors.rb#71
  sig { returns(::T::Array[::TypeAliases::RBS::Definition::Ancestor::TypeAlias_t]) }
  def ancestors; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#72
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  class << self
    # source://rbs//lib/rbs/errors.rb#94
    def check!(self_ancestor, ancestors:, location:); end
  end
end

# source://rbs//lib/rbs/errors.rb#419
class RBS::RecursiveTypeAliasError < ::RBS::BaseError
  # @return [RecursiveTypeAliasError] a new instance of RecursiveTypeAliasError
  #
  # source://rbs//lib/rbs/errors.rb#423
  sig do
    params(
      alias_names: ::T::Array[::RBS::TypeName],
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(alias_names:, location:); end

  # Returns the value of attribute alias_names.
  #
  # source://rbs//lib/rbs/errors.rb#420
  sig { returns(::T::Array[::RBS::TypeName]) }
  def alias_names; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#421
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # source://rbs//lib/rbs/errors.rb#430
  sig { returns(::String) }
  def name; end
end

# source://rbs//lib/rbs/repository.rb#2
# Set of RBS repositories.
#
# A repository object can handle multiple repository roots.
#   repo = RBS::Repository.new()
#   repo.add(Pathname("vendor/rbs/gem-rbs"))
#   repo.add(Pathname("vendor/rbs/internal-rbs"))
#   repo.add(Pathname("vendor/rbs/definitely-rbs"))
#   repo.lookup("minitest", "2.1.3") => Pathname or nil
# If one gem version can resolve to several directories, the last added dir wins.
class RBS::Repository
  # @return [Repository] a new instance of Repository
  #
  # source://rbs//lib/rbs/repository.rb#72
  # An optional keyword argument `no_stdlib` is to skip adding directory for stdlib classes.
  # Passing truthy value will skip loading stdlib. (You can add the stdlib root by yourself.)
  #
  sig { params(no_stdlib: T::Boolean).void }
  def initialize(no_stdlib: T.unsafe(nil)); end

  # source://rbs//lib/rbs/repository.rb#98
  def add(dir); end

  # Returns the value of attribute dirs.
  #
  # source://rbs//lib/rbs/repository.rb#69
  sig { returns(::T::Array[::Pathname]) }
  def dirs; end

  # Returns the value of attribute gems.
  #
  # source://rbs//lib/rbs/repository.rb#70
  sig { returns(::T::Hash[::String, ::RBS::Repository::GemRBS]) }
  def gems; end

  # source://rbs//lib/rbs/repository.rb#108
  def lookup(gem, version); end

  # source://rbs//lib/rbs/repository.rb#113
  def lookup_path(gem, version); end

  class << self
    # source://rbs//lib/rbs/repository.rb#81
    sig { returns(T.attached_class) }
    def default; end

    # source://rbs//lib/rbs/repository.rb#87
    def find_best_version(version, candidates); end
  end
end

# source://rbs//lib/rbs/repository.rb#3
RBS::Repository::DEFAULT_STDLIB_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rbs//lib/rbs/repository.rb#5
class RBS::Repository::GemRBS
  # @return [GemRBS] a new instance of GemRBS
  #
  # source://rbs//lib/rbs/repository.rb#9
  sig { params(name: ::String).void }
  def initialize(name:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/repository.rb#62
  # Returns true if versions is empty.
  sig { returns(T::Boolean) }
  def empty?; end

  # source://rbs//lib/rbs/repository.rb#57
  def find_best_version(version); end

  # source://rbs//lib/rbs/repository.rb#52
  sig { returns(::RBS::Repository::VersionPath) }
  def latest_version; end

  # source://rbs//lib/rbs/repository.rb#20
  sig { void }
  def load!; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/repository.rb#6
  sig { returns(::String) }
  def name; end

  # source://rbs//lib/rbs/repository.rb#47
  sig { returns(::RBS::Repository::VersionPath) }
  def oldest_version; end

  # Returns the value of attribute paths.
  #
  # source://rbs//lib/rbs/repository.rb#7
  sig { returns(::T::Array[::Pathname]) }
  def paths; end

  # source://rbs//lib/rbs/repository.rb#43
  sig { returns(::T::Array[::Gem::Version]) }
  def version_names; end

  # source://rbs//lib/rbs/repository.rb#15
  sig { returns(::T::Hash[::Gem::Version, ::RBS::Repository::VersionPath]) }
  def versions; end
end

# source://rbs//lib/rbs/repository.rb#67
class RBS::Repository::VersionPath < ::Struct
  sig { params(gem: ::RBS::Repository::GemRBS, version: ::Gem::Version, path: ::Pathname).void }
  def initialize(gem:, version:, path:); end

  sig { returns(::RBS::Repository::GemRBS) }
  def gem; end

  def gem=(_); end

  sig { returns(::Pathname) }
  def path; end

  def path=(_); end

  sig { returns(::Gem::Version) }
  def version; end

  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#2
module RBS::Resolver; end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#3
class RBS::Resolver::ConstantResolver
  # @return [ConstantResolver] a new instance of ConstantResolver
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#73
  sig { params(builder: ::RBS::DefinitionBuilder).void }
  def initialize(builder:); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#70
  sig { returns(::RBS::DefinitionBuilder) }
  def builder; end

  # Returns the value of attribute child_constants_cache.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#71
  sig { returns(::T::Hash[::RBS::TypeName, ::T::Hash[::Symbol, ::RBS::Constant]]) }
  def child_constants_cache; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#97
  def children(module_name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#85
  def constants(context); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#160
  def constants_from_ancestors(module_name, constants:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#145
  def constants_from_context(context, constants:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#183
  def constants_itself(context, constants:); end

  # Returns the value of attribute context_constants_cache.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#71
  sig do
    returns(::T::Hash[::TypeAliases::RBS::Resolver::TypeAlias_context, T.nilable(::T::Hash[::Symbol, ::RBS::Constant])])
  end
  def context_constants_cache; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#120
  def load_child_constants(name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#105
  def load_context_constants(context); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#80
  def resolve(name, context:); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#93
  def resolve_child(module_name, name); end

  # Returns the value of attribute table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#70
  sig { returns(::RBS::Resolver::ConstantResolver::Table) }
  def table; end
end

# source://rbs//lib/rbs/resolver/constant_resolver.rb#4
# Table stores the set of immediate child constants of a module.
#
# ```rb
# table = RBS::ConstantResolver::Table.new(env)
# table.children(TypeName("::Object"))                # -> { ... }  Returns a hash of name and constants.
# table.children(TypeName("::File::PATH_SEPARATOR"))  # -> nil      Returns nil because the constant is not a module.
# table.toplevel                                      # -> { ... }  Returns a hash of top level constants.
# ```
# The `#toplevel` is incompatible with Ruby.
# All constants in Ruby are defined under `Object`, and they are accessed with `::` (Colon3) operator.
# RBS is different.
# `::` constants are _toplevel_ constants, and they are not defined under `::Object`.
# The behavior is simulated in `ConstantResolver`.
class RBS::Resolver::ConstantResolver::Table
  # @return [Table] a new instance of Table
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#8
  def initialize(environment); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#48
  def children(name); end

  # Returns the value of attribute children_table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#5
  sig { returns(::T::Hash[::RBS::TypeName, T.nilable(::T::Hash[::Symbol, ::RBS::Constant])]) }
  def children_table; end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#52
  def constant(name); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#65
  def constant_of_constant(name, entry); end

  # source://rbs//lib/rbs/resolver/constant_resolver.rb#56
  def constant_of_module(name, entry); end

  # Returns the value of attribute constants_table.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#6
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::Constant]) }
  def constants_table; end

  # Returns the value of attribute toplevel.
  #
  # source://rbs//lib/rbs/resolver/constant_resolver.rb#5
  sig { returns(::T::Hash[::Symbol, ::RBS::Constant]) }
  def toplevel; end
end

# source://rbs//lib/rbs/resolver/type_name_resolver.rb#3
# TypeNameResolver resolves given relative type name to absolute type name under a module nesting context.
#
# The type name resolution doesn't take account of ancestors of modules.
# It just ignores included modules and super classes.
class RBS::Resolver::TypeNameResolver
  # @return [TypeNameResolver] a new instance of TypeNameResolver
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#7
  def initialize(env); end

  # Returns the value of attribute all_names.
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#4
  sig { returns(::T::Set[::RBS::TypeName]) }
  def all_names; end

  # Returns the value of attribute cache.
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#5
  sig do
    returns(::T::Hash[::TypeAliases::RBS::Resolver::TypeNameResolver::TypeAlias_query, T.nilable(::RBS::TypeName)])
  end
  def cache; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#48
  def has_name?(full_name); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#23
  def resolve(type_name, context:); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#33
  def resolve_in(type_name, context); end

  # source://rbs//lib/rbs/resolver/type_name_resolver.rb#16
  def try_cache(query); end
end

# source://rbs//lib/rbs/substitution.rb#2
# Substitution from type variables to types.
#
# The substitution construction is in _destructive_ manner.
#    sub = Substitution.new
#    sub.add(from: :A, to: type1)
#    sub.add(from: :B, to: type2)
#    sub.instance_type = type3
class RBS::Substitution
  # @return [Substitution] a new instance of Substitution
  #
  # source://rbs//lib/rbs/substitution.rb#10
  sig { void }
  def initialize; end

  # source://rbs//lib/rbs/substitution.rb#14
  # Add mapping to this substitution.
  # Overwrites the previous mapping if same `from` is given.
  sig { params(from: ::Symbol, to: ::TypeAliases::RBS::Types::TypeAlias_t).void }
  def add(from:, to:); end

  # source://rbs//lib/rbs/substitution.rb#35
  def apply(ty); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/substitution.rb#6
  # Returns true if given substitution is identity.
  sig { returns(T::Boolean) }
  def empty?; end

  # Returns the value of attribute instance_type.
  #
  # source://rbs//lib/rbs/substitution.rb#4
  sig { returns(T.nilable(::TypeAliases::RBS::Types::TypeAlias_t)) }
  def instance_type; end

  # Sets the attribute instance_type
  #
  # @param value the value to set the attribute instance_type to.
  #
  # source://rbs//lib/rbs/substitution.rb#4
  def instance_type=(_arg0); end

  # Returns the value of attribute mapping.
  #
  # source://rbs//lib/rbs/substitution.rb#3
  sig { returns(::T::Hash[::Symbol, ::TypeAliases::RBS::Types::TypeAlias_t]) }
  def mapping; end

  # source://rbs//lib/rbs/substitution.rb#51
  # Returns a substitution without variables given in `vars`.
  sig { params(vars: ::Symbol).returns(::RBS::Substitution) }
  def without(*vars); end

  class << self
    # source://rbs//lib/rbs/substitution.rb#18
    def build(variables, types, instance_type: T.unsafe(nil), &block); end
  end
end

# source://rbs//lib/rbs/errors.rb#291
class RBS::SuperclassMismatchError < ::RBS::DefinitionError
  # @return [SuperclassMismatchError] a new instance of SuperclassMismatchError
  #
  # source://rbs//lib/rbs/errors.rb#295
  sig { params(name: ::RBS::TypeName, entry: ::RBS::Environment::ClassEntry).void }
  def initialize(name:, entry:); end

  # Returns the value of attribute entry.
  #
  # source://rbs//lib/rbs/errors.rb#293
  sig { returns(::RBS::Environment::ClassEntry) }
  def entry; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/errors.rb#292
  sig { returns(::RBS::TypeName) }
  def name; end
end

# source://rbs//lib/rbs/type_alias_dependency.rb#2
class RBS::TypeAliasDependency
  # @return [TypeAliasDependency] a new instance of TypeAliasDependency
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#12
  sig { params(env: ::RBS::Environment).void }
  def initialize(env:); end

  # source://rbs//lib/rbs/type_alias_dependency.rb#25
  sig { void }
  def build_dependencies; end

  # Check if an alias type definition is circular & prohibited
  #
  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#17
  def circular_definition?(alias_name); end

  # A hash which stores the transitive closure
  # of the directed graph
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#10
  sig { returns(::T::Hash[::RBS::TypeName, ::T::Hash[::RBS::TypeName, T::Boolean]]) }
  def dependencies; end

  # Direct dependencies corresponds to a directed graph
  # with vertices as types and directions based on assignment of types
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#7
  sig { returns(::T::Hash[::RBS::TypeName, ::T::Set[::RBS::TypeName]]) }
  def direct_dependencies; end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#3
  sig { returns(::RBS::Environment) }
  def env; end

  # source://rbs//lib/rbs/type_alias_dependency.rb#41
  sig { void }
  def transitive_closure; end

  private

  # Recursive function to construct transitive closure
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#69
  def dependency(start, vertex, nested = T.unsafe(nil)); end

  # Constructs directed graph recursively
  #
  # source://rbs//lib/rbs/type_alias_dependency.rb#53
  def direct_dependency(type, result = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/type_alias_regularity.rb#2
# `TypeAliasRegularity` validates if a type alias is regular or not.
#
# Generic and recursive type alias cannot be polymorphic in their definitions.
# ```rbs
# type foo[T] = Integer
#             | foo[T]?     # Allowed. The type argument of `foo` doesn't change.
# type bar[T] = Integer
#             | foo[T]
#             | foo[Array[T]]  # Allowed. There are two type arguments `T` and `Array[T]` of `foo`, but it's not definition of `foo`.
# type baz[T] = Integer
#             | baz[Array[T]]  # Error. Recursive definition of `baz` has different type argument from the definition.
# ```
# The `#nonregular?` method can be used to test if given type name is regular or not.
# ```rb
# validator = RBS::TypeAliasRegularity.validate(env: env)
# validator.nonregular?(TypeName("::foo"))    # => nil
# validator.nonregular?(TypeName("::bar"))    # => nil
# validator.nonregular?(TypeName("::baz"))    # => TypeAliasRegularity::Diagnostic
# A special case is when the type argument is `untyped`.
# type foo[T] = Integer | foo[untyped]    # This is allowed.
class RBS::TypeAliasRegularity
  # @return [TypeAliasRegularity] a new instance of TypeAliasRegularity
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#14
  sig { params(env: ::RBS::Environment).void }
  def initialize(env:); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#57
  def build_alias_type(name); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#12
  sig { returns(::RBS::DefinitionBuilder) }
  def builder; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#65
  def compatible_args?(args1, args2); end

  # Returns the value of attribute diagnostics.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#12
  sig { returns(::T::Hash[::RBS::TypeName, ::RBS::TypeAliasRegularity::Diagnostic]) }
  def diagnostics; end

  # source://rbs//lib/rbs/type_alias_regularity.rb#101
  def each_alias_type(type, &block); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#79
  def each_mutual_alias_defs(&block); end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#12
  sig { returns(::RBS::Environment) }
  def env; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#75
  def nonregular?(type_name); end

  # source://rbs//lib/rbs/type_alias_regularity.rb#20
  sig { void }
  def validate; end

  # source://rbs//lib/rbs/type_alias_regularity.rb#37
  def validate_alias_type(alias_type, names, types); end

  class << self
    # source://rbs//lib/rbs/type_alias_regularity.rb#111
    # Returns new instance which already run `#validate`.
    #
    sig { params(env: ::RBS::Environment).returns(::RBS::TypeAliasRegularity) }
    def validate(env:); end
  end
end

# source://rbs//lib/rbs/type_alias_regularity.rb#3
# `Diagnostic` represents an non-regular type alias declaration error.
# It consists of the name of the alias type and a type on which the nonregularity is detected.
#
# ```rbs
# type t[T] = Integer | t[T?]
# ```
# The type `t` is nonregular because it contains `t[T?]` on it's right hand side.
# diagnostic = validator.nonregular?(TypeName("::t"))
# diagnostic.type_name         # => TypeName("::t")
# diagnostic.nonregular_type   # => t[T?]
class RBS::TypeAliasRegularity::Diagnostic
  # @return [Diagnostic] a new instance of Diagnostic
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#6
  sig { params(type_name: ::RBS::TypeName, nonregular_type: ::RBS::Types::Alias).void }
  def initialize(type_name:, nonregular_type:); end

  # Returns the value of attribute nonregular_type.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#4
  sig { returns(::RBS::Types::Alias) }
  def nonregular_type; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/type_alias_regularity.rb#4
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/type_name.rb#2
# TypeName represents name of types in RBS.
#
# TypeNames are one of the three kind, class, alias, and interface.
# *class* type names corresponds to Ruby classes and modules.
# There are no corresponding Ruby value to *alias* and *interface* type names.
class RBS::TypeName
  include ::Interfaces::Interface_ToJson

  # @return [TypeName] a new instance of TypeName
  #
  # source://rbs//lib/rbs/type_name.rb#7
  # Initializer accepts two keyword args, `namespace` and `name`.
  # Note that `kind` is automatically determined from its `name`.
  #
  # If the name starts with capital alphabet, it is _class_.
  # If the name starts with lower case alphabet, it is _alias_.
  # If the name starts with an underscore, it is _interface_.
  sig { params(namespace: ::RBS::Namespace, name: ::Symbol).void }
  def initialize(namespace:, name:); end

  # source://rbs//lib/rbs/type_name.rb#77
  def +(other); end

  # source://rbs//lib/rbs/type_name.rb#23
  def ==(other); end

  # source://rbs//lib/rbs/type_name.rb#53
  sig { returns(::RBS::TypeName) }
  def absolute!; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#57
  sig { returns(T::Boolean) }
  def absolute?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#49
  # Returns true when self is an _alias_ type name.
  sig { returns(T::Boolean) }
  def alias?; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#45
  # Returns true when self is a _class_ type name.
  sig { returns(T::Boolean) }
  def class?; end

  # source://rbs//lib/rbs/type_name.rb#23
  def eql?(other); end

  # source://rbs//lib/rbs/type_name.rb#29
  sig { returns(::Integer) }
  def hash; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name.rb#65
  # Returns true when self is an _interface_ type name.
  sig { returns(T::Boolean) }
  def interface?; end

  # Returns the value of attribute kind.
  #
  # source://rbs//lib/rbs/type_name.rb#5
  sig { returns(::TypeAliases::RBS::TypeName::TypeAlias_kind) }
  def kind; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/type_name.rb#4
  sig { returns(::Symbol) }
  def name; end

  # Returns the value of attribute namespace.
  #
  # source://rbs//lib/rbs/type_name.rb#3
  sig { returns(::RBS::Namespace) }
  def namespace; end

  # source://rbs//lib/rbs/type_name.rb#61
  sig { returns(::RBS::TypeName) }
  def relative!; end

  # source://rbs//lib/rbs/type_name.rb#73
  sig { returns(::T::Array[::Symbol]) }
  def split; end

  # source://rbs//lib/rbs/type_name.rb#37
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/type_name.rb#41
  # Returns a namespace with same components of self.
  sig { returns(::RBS::Namespace) }
  def to_namespace; end

  # source://tapioca/0.9.2/lib/tapioca/static/rbs/type_name_patch.rb#12
  sig { returns(::String) }
  def to_s; end

  # source://rbs//lib/rbs/type_name.rb#69
  def with_prefix(namespace); end
end

# source://rbs//lib/rbs/type_name_resolver.rb#2
class RBS::TypeNameResolver
  # @return [TypeNameResolver] a new instance of TypeNameResolver
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#8
  def initialize; end

  # source://rbs//lib/rbs/type_name_resolver.rb#19
  def add_names(names); end

  # Returns the value of attribute all_names.
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#5
  sig { returns(::T::Set[::RBS::TypeName]) }
  def all_names; end

  # Returns the value of attribute cache.
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#6
  sig { returns(::T::Hash[::RBS::TypeNameResolver::Query, T.nilable(::RBS::TypeName)]) }
  def cache; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/type_name_resolver.rb#59
  def has_name?(full_name); end

  # source://rbs//lib/rbs/type_name_resolver.rb#31
  def resolve(type_name, context:); end

  # source://rbs//lib/rbs/type_name_resolver.rb#24
  def try_cache(query); end

  class << self
    # source://rbs//lib/rbs/type_name_resolver.rb#13
    def from_env(env); end
  end
end

# source://rbs//lib/rbs/type_name_resolver.rb#3
class RBS::TypeNameResolver::Query < ::Struct
  sig { params(type_name: ::RBS::TypeName, context: ::TypeAliases::RBS::TypeNameResolver::TypeAlias_context).void }
  def initialize(type_name:, context:); end

  sig { returns(::T::Array[::RBS::Namespace]) }
  def context; end

  def context=(_); end

  sig { returns(::RBS::TypeName) }
  def type_name; end

  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rbs//lib/rbs/types.rb#2
module RBS::Types; end

# source://rbs//lib/rbs/types.rb#328
class RBS::Types::Alias
  include ::RBS::Types::Application
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Alias] a new instance of Alias
  #
  # source://rbs//lib/rbs/types.rb#333
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Alias::TypeAlias_loc)
    ).void
  end
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#329
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Alias::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#355
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#347
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#343
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#339
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#205
module RBS::Types::Application
  alias eql? ==

  # source://rbs//lib/rbs/types.rb#209
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://rbs//lib/rbs/types.rb#207
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def args; end

  # source://rbs//lib/rbs/types.rb#235
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#209
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#219
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#215
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#206
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/types.rb#227
  sig { params(level: ::Integer).returns(::String) }
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#39
module RBS::Types::Bases; end

# source://rbs//lib/rbs/types.rb#95
class RBS::Types::Bases::Any < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#40
class RBS::Types::Bases::Base
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType
  include ::RBS::Types::NoTypeName
  include ::Interfaces::RBS::Types::Interface_TypeBase

  alias eql? ==

  # @return [Base] a new instance of Base
  #
  # source://rbs//lib/rbs/types.rb#43
  sig { params(location: T.nilable(::RBS::Location[T.untyped, T.untyped])).void }
  def initialize(location:); end

  # source://rbs//lib/rbs/types.rb#47
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#47
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#51
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#41
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # source://rbs//lib/rbs/types.rb#62
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#67
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#93
class RBS::Types::Bases::Bool < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#98
class RBS::Types::Bases::Bottom < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#105
class RBS::Types::Bases::Class < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#100
class RBS::Types::Bases::Instance < ::RBS::Types::Bases::Base
  # source://rbs//lib/rbs/types.rb#101
  def sub(s); end
end

# source://rbs//lib/rbs/types.rb#96
class RBS::Types::Bases::Nil < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#99
class RBS::Types::Bases::Self < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#97
class RBS::Types::Bases::Top < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#94
class RBS::Types::Bases::Void < ::RBS::Types::Bases::Base; end

# source://rbs//lib/rbs/types.rb#1020
class RBS::Types::Block
  include ::Interfaces::Interface_ToJson

  # @return [Block] a new instance of Block
  #
  # source://rbs//lib/rbs/types.rb#1024
  sig { params(type: ::RBS::Types::Function, required: ::TypeAliases::TypeAlias_boolish).void }
  def initialize(type:, required:); end

  # source://rbs//lib/rbs/types.rb#1029
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#1049
  def map_type(&block); end

  # Returns the value of attribute required.
  #
  # source://rbs//lib/rbs/types.rb#1022
  sig { returns(T::Boolean) }
  def required; end

  # source://rbs//lib/rbs/types.rb#1042
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#1035
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#1021
  sig { returns(::RBS::Types::Function) }
  def type; end
end

# source://rbs//lib/rbs/types.rb#286
# ClassInstance represents a type of an instance of a class.
#
#    String           # Type of an instance of String class.
#    Array[String]    # Type of an instance of Array class with instances of String.
#    Kernel           # Type of an instance of a class which includes Kernel.
class RBS::Types::ClassInstance
  include ::RBS::Types::Application
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [ClassInstance] a new instance of ClassInstance
  #
  # source://rbs//lib/rbs/types.rb#291
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::ClassInstance::TypeAlias_loc)
    ).void
  end
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#287
  sig { returns(T.nilable(::TypeAliases::RBS::Types::ClassInstance::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#315
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#307
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#301
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#297
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#165
class RBS::Types::ClassSingleton
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType
  include ::Interfaces::RBS::Types::Interface_TypeBase

  alias eql? ==

  # @return [ClassSingleton] a new instance of ClassSingleton
  #
  # source://rbs//lib/rbs/types.rb#169
  sig do
    params(
      name: ::RBS::TypeName,
      location: T.nilable(::TypeAliases::RBS::Types::ClassSingleton::TypeAlias_loc)
    ).void
  end
  def initialize(name:, location:); end

  # source://rbs//lib/rbs/types.rb#174
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#174
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#180
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#167
  sig { returns(T.nilable(::TypeAliases::RBS::Types::ClassSingleton::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#197
  def map_type_name; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#166
  sig { returns(::RBS::TypeName) }
  def name; end

  # source://rbs//lib/rbs/types.rb#187
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#191
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#21
module RBS::Types::EmptyEachType
  # source://rbs//lib/rbs/types.rb#22
  def each_type; end

  # source://rbs//lib/rbs/types.rb#30
  def map_type(&block); end
end

# source://rbs//lib/rbs/types.rb#722
class RBS::Types::Function
  include ::Interfaces::Interface_ToJson

  # @return [Function] a new instance of Function
  #
  # source://rbs//lib/rbs/types.rb#778
  sig do
    params(
      required_positionals: ::T::Array[::RBS::Types::Function::Param],
      optional_positionals: ::T::Array[::RBS::Types::Function::Param],
      rest_positionals: T.nilable(::RBS::Types::Function::Param),
      trailing_positionals: ::T::Array[::RBS::Types::Function::Param],
      required_keywords: ::T::Hash[::Symbol, ::RBS::Types::Function::Param],
      optional_keywords: ::T::Hash[::Symbol, ::RBS::Types::Function::Param],
      rest_keywords: T.nilable(::RBS::Types::Function::Param),
      return_type: ::TypeAliases::RBS::Types::TypeAlias_t
    ).void
  end
  def initialize(required_positionals:, optional_positionals:, rest_positionals:, trailing_positionals:, required_keywords:, optional_keywords:, rest_keywords:, return_type:); end

  # source://rbs//lib/rbs/types.rb#789
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#981
  sig { returns([::RBS::Types::Function::Param, ::RBS::Types::Function]) }
  def drop_head; end

  # source://rbs//lib/rbs/types.rb#998
  sig { returns([::RBS::Types::Function::Param, ::RBS::Types::Function]) }
  def drop_tail; end

  # source://rbs//lib/rbs/types.rb#881
  def each_param(&block); end

  # source://rbs//lib/rbs/types.rb#866
  def each_type; end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/types.rb#952
  sig { returns(T::Boolean) }
  def empty?; end

  # source://rbs//lib/rbs/types.rb#789
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#815
  def free_variables(set = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/types.rb#1011
  sig { returns(T::Boolean) }
  def has_keyword?; end

  # source://rbs//lib/rbs/types.rb#803
  def hash; end

  # source://rbs//lib/rbs/types.rb#843
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#860
  def map_type_name(&block); end

  # Returns the value of attribute optional_keywords.
  #
  # source://rbs//lib/rbs/types.rb#774
  sig { returns(::T::Hash[::Symbol, ::RBS::Types::Function::Param]) }
  def optional_keywords; end

  # Returns the value of attribute optional_positionals.
  #
  # source://rbs//lib/rbs/types.rb#770
  sig { returns(::T::Array[::RBS::Types::Function::Param]) }
  def optional_positionals; end

  # source://rbs//lib/rbs/types.rb#962
  sig { returns(::String) }
  def param_to_s; end

  # Returns the value of attribute required_keywords.
  #
  # source://rbs//lib/rbs/types.rb#773
  sig { returns(::T::Hash[::Symbol, ::RBS::Types::Function::Param]) }
  def required_keywords; end

  # Returns the value of attribute required_positionals.
  #
  # source://rbs//lib/rbs/types.rb#769
  sig { returns(::T::Array[::RBS::Types::Function::Param]) }
  def required_positionals; end

  # Returns the value of attribute rest_keywords.
  #
  # source://rbs//lib/rbs/types.rb#775
  sig { returns(T.nilable(::RBS::Types::Function::Param)) }
  def rest_keywords; end

  # Returns the value of attribute rest_positionals.
  #
  # source://rbs//lib/rbs/types.rb#771
  sig { returns(T.nilable(::RBS::Types::Function::Param)) }
  def rest_positionals; end

  # source://rbs//lib/rbs/types.rb#977
  sig { returns(::String) }
  def return_to_s; end

  # Returns the value of attribute return_type.
  #
  # source://rbs//lib/rbs/types.rb#776
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def return_type; end

  # source://rbs//lib/rbs/types.rb#908
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#895
  def to_json(state = T.unsafe(nil)); end

  # Returns the value of attribute trailing_positionals.
  #
  # source://rbs//lib/rbs/types.rb#772
  sig { returns(::T::Array[::RBS::Types::Function::Param]) }
  def trailing_positionals; end

  # source://rbs//lib/rbs/types.rb#938
  sig do
    params(
      required_positionals: ::T::Array[::RBS::Types::Function::Param],
      optional_positionals: ::T::Array[::RBS::Types::Function::Param],
      rest_positionals: T.nilable(::RBS::Types::Function::Param),
      trailing_positionals: ::T::Array[::RBS::Types::Function::Param],
      required_keywords: ::T::Hash[::Symbol, ::RBS::Types::Function::Param],
      optional_keywords: ::T::Hash[::Symbol, ::RBS::Types::Function::Param],
      rest_keywords: T.nilable(::RBS::Types::Function::Param),
      return_type: ::TypeAliases::RBS::Types::TypeAlias_t
    ).returns(::RBS::Types::Function)
  end
  def update(required_positionals: T.unsafe(nil), optional_positionals: T.unsafe(nil), rest_positionals: T.unsafe(nil), trailing_positionals: T.unsafe(nil), required_keywords: T.unsafe(nil), optional_keywords: T.unsafe(nil), rest_keywords: T.unsafe(nil), return_type: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#925
  def with_return_type(type); end

  class << self
    # source://rbs//lib/rbs/types.rb#912
    def empty(return_type); end
  end
end

# source://rbs//lib/rbs/types.rb#723
class RBS::Types::Function::Param
  # @return [Param] a new instance of Param
  #
  # source://rbs//lib/rbs/types.rb#728
  sig do
    params(
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      name: T.nilable(::Symbol),
      location: T.nilable(::TypeAliases::RBS::Types::Function::Param::TypeAlias_loc)
    ).void
  end
  def initialize(type:, name:, location: T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#734
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#734
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#740
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#726
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Function::Param::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#744
  def map_type(&block); end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#725
  sig { returns(T.nilable(::Symbol)) }
  def name; end

  # source://rbs//lib/rbs/types.rb#752
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#756
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#724
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/types.rb#244
class RBS::Types::Interface
  include ::RBS::Types::Application
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Interface] a new instance of Interface
  #
  # source://rbs//lib/rbs/types.rb#249
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Interface::TypeAlias_loc)
    ).void
  end
  def initialize(name:, args:, location:); end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#245
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Interface::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#273
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#265
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#259
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#255
  def to_json(state = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#653
class RBS::Types::Intersection
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Intersection] a new instance of Intersection
  #
  # source://rbs//lib/rbs/types.rb#657
  sig do
    params(
      types: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Intersection::TypeAlias_loc)
    ).void
  end
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#662
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#698
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#662
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#672
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#668
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#655
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Intersection::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#706
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#714
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#684
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#680
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#689
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#654
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def types; end
end

# source://rbs//lib/rbs/types.rb#1140
class RBS::Types::Literal
  include ::RBS::Types::NoFreeVariables
  include ::RBS::Types::NoSubst
  include ::RBS::Types::EmptyEachType
  include ::RBS::Types::NoTypeName
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Literal] a new instance of Literal
  #
  # source://rbs//lib/rbs/types.rb#1144
  sig do
    params(
      literal: ::TypeAliases::RBS::Types::Literal::TypeAlias_literal,
      location: T.nilable(::TypeAliases::RBS::Types::Literal::TypeAlias_loc)
    ).void
  end
  def initialize(literal:, location:); end

  # source://rbs//lib/rbs/types.rb#1149
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#1149
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#1155
  def hash; end

  # Returns the value of attribute literal.
  #
  # source://rbs//lib/rbs/types.rb#1141
  sig { returns(::TypeAliases::RBS::Types::Literal::TypeAlias_literal) }
  def literal; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#1142
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Literal::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#1164
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1168
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#3
module RBS::Types::NoFreeVariables
  # source://rbs//lib/rbs/types.rb#4
  def free_variables(set = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#9
module RBS::Types::NoSubst
  # source://rbs//lib/rbs/types.rb#10
  def sub(s); end
end

# source://rbs//lib/rbs/types.rb#15
module RBS::Types::NoTypeName
  # source://rbs//lib/rbs/types.rb#16
  def map_type_name; end
end

# source://rbs//lib/rbs/types.rb#515
class RBS::Types::Optional
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Optional] a new instance of Optional
  #
  # source://rbs//lib/rbs/types.rb#519
  sig do
    params(
      type: ::TypeAliases::RBS::Types::TypeAlias_t,
      location: T.nilable(::TypeAliases::RBS::Types::Optional::TypeAlias_loc)
    ).void
  end
  def initialize(type:, location:); end

  # source://rbs//lib/rbs/types.rb#524
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#558
  def each_type; end

  # source://rbs//lib/rbs/types.rb#524
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#534
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#530
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#517
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Optional::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#573
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#566
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#542
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#538
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#546
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#516
  sig { returns(::TypeAliases::RBS::Types::TypeAlias_t) }
  def type; end
end

# source://rbs//lib/rbs/types.rb#1057
class RBS::Types::Proc
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Proc] a new instance of Proc
  #
  # source://rbs//lib/rbs/types.rb#1062
  sig do
    params(
      location: T.nilable(::TypeAliases::RBS::Types::Proc::TypeAlias_loc),
      type: ::RBS::Types::Function,
      block: T.nilable(::RBS::Types::Block)
    ).void
  end
  def initialize(location:, type:, block:); end

  # source://rbs//lib/rbs/types.rb#1068
  def ==(other); end

  # Returns the value of attribute block.
  #
  # source://rbs//lib/rbs/types.rb#1059
  sig { returns(T.nilable(::RBS::Types::Block)) }
  def block; end

  # source://rbs//lib/rbs/types.rb#1110
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#1068
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#1078
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1074
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#1060
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Proc::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#1127
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#1119
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#1093
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#1084
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#1097
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute type.
  #
  # source://rbs//lib/rbs/types.rb#1058
  sig { returns(::RBS::Types::Function) }
  def type; end
end

# source://rbs//lib/rbs/types.rb#439
class RBS::Types::Record
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Record] a new instance of Record
  #
  # source://rbs//lib/rbs/types.rb#443
  sig do
    params(
      fields: ::T::Hash[::Symbol, ::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Record::TypeAlias_loc)
    ).void
  end
  def initialize(fields:, location:); end

  # source://rbs//lib/rbs/types.rb#448
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#488
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#448
  def eql?(other); end

  # Returns the value of attribute fields.
  #
  # source://rbs//lib/rbs/types.rb#440
  sig { returns(::T::Hash[::Symbol, ::TypeAliases::RBS::Types::TypeAlias_t]) }
  def fields; end

  # source://rbs//lib/rbs/types.rb#458
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#454
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#441
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Record::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#503
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#496
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#470
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#466
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#475
  def to_s(level = T.unsafe(nil)); end
end

# source://rbs//lib/rbs/types.rb#368
class RBS::Types::Tuple
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Tuple] a new instance of Tuple
  #
  # source://rbs//lib/rbs/types.rb#372
  sig do
    params(
      types: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Tuple::TypeAlias_loc)
    ).void
  end
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#377
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#412
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#377
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#387
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#383
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#370
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Tuple::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#427
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#420
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#399
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#395
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#404
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#369
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def types; end
end

# source://rbs//lib/rbs/types.rb#585
class RBS::Types::Union
  include ::Interfaces::RBS::Types::Interface_TypeBase

  # @return [Union] a new instance of Union
  #
  # source://rbs//lib/rbs/types.rb#589
  sig do
    params(
      types: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      location: T.nilable(::TypeAliases::RBS::Types::Union::TypeAlias_loc)
    ).void
  end
  def initialize(types:, location:); end

  # source://rbs//lib/rbs/types.rb#594
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#629
  def each_type(&block); end

  # source://rbs//lib/rbs/types.rb#594
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#604
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#600
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#587
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Union::TypeAlias_loc)) }
  def location; end

  # source://rbs//lib/rbs/types.rb#637
  def map_type(&block); end

  # source://rbs//lib/rbs/types.rb#645
  def map_type_name(&block); end

  # source://rbs//lib/rbs/types.rb#616
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#612
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#621
  def to_s(level = T.unsafe(nil)); end

  # Returns the value of attribute types.
  #
  # source://rbs//lib/rbs/types.rb#586
  sig { returns(::T::Array[::TypeAliases::RBS::Types::TypeAlias_t]) }
  def types; end
end

# source://rbs//lib/rbs/types.rb#108
class RBS::Types::Variable
  include ::RBS::Types::NoTypeName
  include ::RBS::Types::EmptyEachType
  include ::Interfaces::RBS::Types::Interface_TypeBase

  alias eql? ==

  # @return [Variable] a new instance of Variable
  #
  # source://rbs//lib/rbs/types.rb#114
  sig { params(name: ::Symbol, location: T.nilable(::TypeAliases::RBS::Types::Variable::TypeAlias_loc)).void }
  def initialize(name:, location:); end

  # source://rbs//lib/rbs/types.rb#119
  def ==(other); end

  # source://rbs//lib/rbs/types.rb#119
  def eql?(other); end

  # source://rbs//lib/rbs/types.rb#129
  def free_variables(set = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#125
  sig { returns(::Integer) }
  def hash; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/types.rb#110
  sig { returns(T.nilable(::TypeAliases::RBS::Types::Variable::TypeAlias_loc)) }
  def location; end

  # Returns the value of attribute name.
  #
  # source://rbs//lib/rbs/types.rb#109
  sig { returns(::Symbol) }
  def name; end

  # source://rbs//lib/rbs/types.rb#139
  def sub(s); end

  # source://rbs//lib/rbs/types.rb#135
  def to_json(state = T.unsafe(nil)); end

  # source://rbs//lib/rbs/types.rb#158
  def to_s(level = T.unsafe(nil)); end

  class << self
    # source://rbs//lib/rbs/types.rb#143
    def build(v); end

    # source://rbs//lib/rbs/types.rb#153
    def fresh(v = T.unsafe(nil)); end
  end
end

# source://rbs//lib/rbs/errors.rb#275
class RBS::UnknownMethodAliasError < ::RBS::DefinitionError
  # @return [UnknownMethodAliasError] a new instance of UnknownMethodAliasError
  #
  # source://rbs//lib/rbs/errors.rb#281
  sig do
    params(
      type_name: ::RBS::TypeName,
      original_name: ::Symbol,
      aliased_name: ::Symbol,
      location: T.nilable(::RBS::Location[T.untyped, T.untyped])
    ).void
  end
  def initialize(type_name:, original_name:, aliased_name:, location:); end

  # Returns the value of attribute aliased_name.
  #
  # source://rbs//lib/rbs/errors.rb#278
  sig { returns(::Symbol) }
  def aliased_name; end

  # Returns the value of attribute location.
  #
  # source://rbs//lib/rbs/errors.rb#279
  sig { returns(T.nilable(::RBS::Location[T.untyped, T.untyped])) }
  def location; end

  # Returns the value of attribute original_name.
  #
  # source://rbs//lib/rbs/errors.rb#277
  sig { returns(::Symbol) }
  def original_name; end

  # Returns the value of attribute type_name.
  #
  # source://rbs//lib/rbs/errors.rb#276
  sig { returns(::RBS::TypeName) }
  def type_name; end
end

# source://rbs//lib/rbs/version.rb#2
RBS::VERSION = T.let(T.unsafe(nil), String)

# source://rbs//lib/rbs/validator.rb#2
class RBS::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://rbs//lib/rbs/validator.rb#7
  sig { params(env: ::RBS::Environment, resolver: ::RBS::TypeNameResolver).void }
  def initialize(env:, resolver:); end

  # source://rbs//lib/rbs/validator.rb#13
  def absolute_type(type, context:); end

  # Returns the value of attribute definition_builder.
  #
  # source://rbs//lib/rbs/validator.rb#5
  sig { returns(::RBS::DefinitionBuilder) }
  def definition_builder; end

  # Returns the value of attribute env.
  #
  # source://rbs//lib/rbs/validator.rb#3
  sig { returns(::RBS::Environment) }
  def env; end

  # Returns the value of attribute resolver.
  #
  # source://rbs//lib/rbs/validator.rb#4
  sig { returns(::RBS::TypeNameResolver) }
  def resolver; end

  # source://rbs//lib/rbs/validator.rb#147
  sig { returns(::RBS::TypeAliasDependency) }
  def type_alias_dependency; end

  # source://rbs//lib/rbs/validator.rb#151
  sig { returns(::RBS::TypeAliasRegularity) }
  def type_alias_regularity; end

  # source://rbs//lib/rbs/validator.rb#98
  def validate_method_definition(method_def, type_name:); end

  # Validates presence of the relative type, and application arity match.
  #
  # source://rbs//lib/rbs/validator.rb#20
  def validate_type(type, context:); end

  # source://rbs//lib/rbs/validator.rb#57
  def validate_type_alias(entry:); end

  # source://rbs//lib/rbs/validator.rb#113
  def validate_type_params(params, type_name:, location:, method_name: T.unsafe(nil)); end
end

# source://rbs//lib/rbs/variance_calculator.rb#2
# Calculate the use variances of type variables in declaration.
#
# ```rb
# calculator = VarianceCalculator.new(builder: builder)
# # Calculates variances in a method type
# result = calculator.in_method_type(method_type: method_type, variables: variables)
# # Calculates variances in a inheritance/mixin/...
# result = calculator.in_inherit(name: name, args: args, variables: variables)
# # Calculates variances in a type alias
# result = calculator.in_type_alias(name: name, args: args, variables: variables)
# ```
# See `RBS::VarianceCaluculator::Result` for information recorded in the `Result` object.
class RBS::VarianceCalculator
  # @return [VarianceCalculator] a new instance of VarianceCalculator
  #
  # source://rbs//lib/rbs/variance_calculator.rb#76
  sig { params(builder: ::RBS::DefinitionBuilder).void }
  def initialize(builder:); end

  # Returns the value of attribute builder.
  #
  # source://rbs//lib/rbs/variance_calculator.rb#74
  sig { returns(::RBS::DefinitionBuilder) }
  def builder; end

  # source://rbs//lib/rbs/variance_calculator.rb#80
  sig { returns(::RBS::Environment) }
  def env; end

  # source://rbs//lib/rbs/variance_calculator.rb#164
  def function(type, result:, context:); end

  # source://rbs//lib/rbs/variance_calculator.rb#96
  sig do
    params(
      name: ::RBS::TypeName,
      args: ::T::Array[::TypeAliases::RBS::Types::TypeAlias_t],
      variables: ::T::Array[::Symbol]
    ).returns(::RBS::VarianceCalculator::Result)
  end
  def in_inherit(name:, args:, variables:); end

  # source://rbs//lib/rbs/variance_calculator.rb#84
  sig do
    params(
      method_type: ::RBS::MethodType,
      variables: ::T::Array[::Symbol]
    ).returns(::RBS::VarianceCalculator::Result)
  end
  def in_method_type(method_type:, variables:); end

  # source://rbs//lib/rbs/variance_calculator.rb#108
  sig { params(name: ::RBS::TypeName).returns(::RBS::VarianceCalculator::Result) }
  def in_type_alias(name:); end

  # source://rbs//lib/rbs/variance_calculator.rb#171
  def negate(variance); end

  # source://rbs//lib/rbs/variance_calculator.rb#116
  def type(type, result:, context:); end
end

# source://rbs//lib/rbs/variance_calculator.rb#3
# Result contains the set of type variables and it's variance in a occurrence.
#
# ```rb
# # Enumerates recorded type variables
# result.each do |name, variance|
#   # name is the name of a type variable
#   # variance is one of :unused | :covariant | :contravariant | :invariant
# end
# ```
# You can test with `compatible?` method if the type variable occurrences are compatible with specified (annotated) variance.
# # When T is declared as `out T`
# result.compatible?(:T, with_annotation: :covariant)
# # When T is declared as `in T`
# result.compatible?(:T, with_annotation: :contravariant)
# # When T is declared as `T`
# result.compatible?(:T, with_annotation: :invariant)
class RBS::VarianceCalculator::Result
  # @return [Result] a new instance of Result
  #
  # source://rbs//lib/rbs/variance_calculator.rb#6
  sig { params(variables: ::T::Array[::Symbol]).void }
  def initialize(variables:); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#43
  def compatible?(var, with_annotation:); end

  # source://rbs//lib/rbs/variance_calculator.rb#22
  def contravariant(x); end

  # source://rbs//lib/rbs/variance_calculator.rb#13
  def covariant(x); end

  # source://rbs//lib/rbs/variance_calculator.rb#35
  def each(&block); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#39
  def include?(name); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/variance_calculator.rb#58
  def incompatible?(params); end

  # source://rbs//lib/rbs/variance_calculator.rb#31
  def invariant(x); end

  # Returns the value of attribute result.
  #
  # source://rbs//lib/rbs/variance_calculator.rb#4
  sig { returns(::T::Hash[::Symbol, ::TypeAliases::RBS::VarianceCalculator::TypeAlias_variance]) }
  def result; end
end

# source://rbs//lib/rbs/vendorer.rb#2
# Copies RBS files loaded through `loader` under `vendor_dir`.
#
# Core libraries and library RBS files will be copied.
#   loader = RBS::EnvironmentLoader.new()
#   loader.add(library: set)               # Libraries will be copied.
#   loader.add(library: "minitest", version: "1.2.3")
#   loader.add(path: Pathname("sig"))      # Dirs will be ignored.
#   vendorer = RBS::Vendorer.new(vendor_dir: Pathname("vendor/rbs"), loader: loader)
#   vendorer.clearn!
#   vendorer.copy!
# The result will be:
#   vendor/rbs/core            => Will include core RBSs
#   vendor/rbs/set-0           => Will include `set` library RBSs.
#   vendor/rbs/minitest-1.2.3  => Will include `minitest` library RBSs.
# The vendorerd RBSs will be loaded through :dir source.
#   loader = RBS::EnvironmentLoader.new(core_root: nil, repository: RBS::Repository.new(no_stdlib: true))
#   loader.add(path: Pathname("vendor/rbs"))
#   loader.add(path: Pathname("sig"))
class RBS::Vendorer
  # @return [Vendorer] a new instance of Vendorer
  #
  # source://rbs//lib/rbs/vendorer.rb#6
  sig { params(vendor_dir: ::Pathname, loader: ::RBS::EnvironmentLoader).void }
  def initialize(vendor_dir:, loader:); end

  # source://rbs//lib/rbs/vendorer.rb#19
  # Deletes `vendor_dir` and its content if exists.
  #
  sig { void }
  def clean!; end

  # source://rbs//lib/rbs/vendorer.rb#26
  # Copy RBS files into `vendor_dir`.
  # Ensures the `vendor_dir` exists.
  sig { void }
  def copy!; end

  # source://rbs//lib/rbs/vendorer.rb#11
  def ensure_dir; end

  # Returns the value of attribute loader.
  #
  # source://rbs//lib/rbs/vendorer.rb#4
  sig { returns(::RBS::EnvironmentLoader) }
  def loader; end

  # Returns the value of attribute vendor_dir.
  #
  # source://rbs//lib/rbs/vendorer.rb#3
  sig { returns(::Pathname) }
  def vendor_dir; end
end

# source://rbs//lib/rbs/writer.rb#2
# Writer prints RBS AST to String.
#
class RBS::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://rbs//lib/rbs/writer.rb#6
  sig { params(out: ::Interfaces::RBS::Writer::Interface_IO).void }
  def initialize(out:); end

  # source://rbs//lib/rbs/writer.rb#312
  def attribute(kind, attr); end

  # source://rbs//lib/rbs/writer.rb#21
  def indent(size = T.unsafe(nil)); end

  # Returns the value of attribute indentation.
  #
  # source://rbs//lib/rbs/writer.rb#4
  sig { returns(::T::Array[::String]) }
  def indentation; end

  # source://rbs//lib/rbs/writer.rb#242
  def method_name(name); end

  # source://rbs//lib/rbs/writer.rb#168
  def name_and_args(name, args); end

  # source://rbs//lib/rbs/writer.rb#156
  def name_and_params(name, params); end

  # Returns the value of attribute out.
  #
  # source://rbs//lib/rbs/writer.rb#3
  sig { returns(::Interfaces::RBS::Writer::Interface_IO) }
  def out; end

  # source://rbs//lib/rbs/writer.rb#28
  # Returns the current indentation of lines.
  #
  sig { returns(::String) }
  def prefix; end

  # source://rbs//lib/rbs/writer.rb#16
  sig { params(preserve: T::Boolean).returns(T.self_type) }
  def preserve!(preserve: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rbs//lib/rbs/writer.rb#12
  sig { returns(T::Boolean) }
  def preserve?; end

  # source://rbs//lib/rbs/writer.rb#342
  def preserve_empty_line(prev, decl); end

  # source://rbs//lib/rbs/writer.rb#178
  def put_lines(lines, leading_spaces:); end

  # source://rbs//lib/rbs/writer.rb#32
  def puts(string = T.unsafe(nil)); end

  # source://rbs//lib/rbs/writer.rb#71
  def write(decls); end

  # source://rbs//lib/rbs/writer.rb#40
  def write_annotation(annotations); end

  # source://rbs//lib/rbs/writer.rb#58
  def write_comment(comment); end

  # source://rbs//lib/rbs/writer.rb#80
  def write_decl(decl); end

  # source://rbs//lib/rbs/writer.rb#263
  def write_def(member); end

  # source://rbs//lib/rbs/writer.rb#255
  def write_loc_source(located); end

  # source://rbs//lib/rbs/writer.rb#188
  def write_member(member); end

  private

  sig { params(_arg0: ::RBS::AST::Declarations::Alias).void }
  def write_alias(_arg0); end
end
